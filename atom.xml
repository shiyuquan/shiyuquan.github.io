<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shiyuquan.github.io/"/>
  <updated>2018-11-24T06:44:03.121Z</updated>
  <id>https://shiyuquan.github.io/</id>
  
  <author>
    <name>大腿君的大腿君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>杂谈-近期回顾</title>
    <link href="https://shiyuquan.github.io/2018/11/24/%E6%9D%82%E8%B0%88-%E8%BF%91%E6%9C%9F%E5%9B%9E%E9%A1%BE/"/>
    <id>https://shiyuquan.github.io/2018/11/24/杂谈-近期回顾/</id>
    <published>2018-11-24T05:59:50.000Z</published>
    <updated>2018-11-24T06:44:03.121Z</updated>
    
    <content type="html"><![CDATA[<p>突然想起来好久没写东西了，近期也没什么特别想写的，就回顾一下前些天的东西吧<br><a id="more"></a></p><p>上次写博客到现在应该是9天了，近一个星期没做出什么特别的事情，记录一下。</p><p>之前在公司接到了一个做报表的活，学习使用帆软来制作报表。也挺久了，一开始都是让我写一些报表，作为一个开发人员我内心真的特别抵触这个事情。报表给文员写不就好了，怎么让我一个开发的写。上级给任务的时候的意思是我前后台都会点，上手这个报表会好做。我信以为真，以为是要用到前后台的知识做一些开发，结果就是使用帆软的工具，可能需要点开发知识而已…心烦意乱，毕竟我当下还是想学东西，做开发的，用帆软写报表的活着实让我心里面不好受。</p><p>这个状态持续了相当一段时间，直到上个星期，得到了需要做一些基于帆软二次开发的需求，才有了点好转。毕竟是做开发了不是，然而报表还是要我写就是了…帆软的二次开发应该是不太难的，但是我从开始找入口到现在还是过去了一个多星期，那么重要的坎在哪里呢？</p><p>第一是帆软他们自己有提供java的二次开发接口，但是！文档基本为零！提供了接口，跟你讲可以做这些事情但是不告诉你怎么做，去哪里做。找他们的二开项目花了我一两天时间，最后找官方的客服，才给了我一个开发者文档，这东西不找他们我都不知道有…论坛官网上面的逛了一遍又一遍都没看到过，真是无语了。</p><p>第二点，在有了开发者文档后，跟着文档去git拉开发项目，基本上就是根着已有的去模仿创新，来写我们自己的插件。思路是有，但是问题来了…文档就给你说了个要做这个就去实现什么借口，然后给你一个借口的名字…就没了。我真的无奈，当下来的包里面的确有他们提供的所有东西，但是我要怎么写啊哥，给点明路好吗。无奈下我就去看他们的源码，就是一大坑，来自于他们的很多代码没有注释，看着看着就不知道那个类那个方法是干嘛的了。瞬间意识到了写注释的重要性，在此之前都是知道，懂。这次是真的亲身经历了。</p><p>千辛万苦下找到了点门路，终于可以有点写地动了。而这个时候都是过去了五六天了…着实无奈。</p><p>中间学着发布了一下，把帆软发布到了自己公司的服务器，容器是docker，发布的过程比我想象的简单很多，我想发布的主要困难可能还是得等以后才能遇见了。</p><p>总结下来，这一周的收获就是让我意识到了产品 、功能的文档的重要性，二个就是开发人写注释的重要性。需要明了地做到让目标作用人员能清晰的读懂你做的事，和他们能做的事，非常重要！<br><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然想起来好久没写东西了，近期也没什么特别想写的，就回顾一下前些天的东西吧&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://shiyuquan.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>springboot long型ID精度丢失问题</title>
    <link href="https://shiyuquan.github.io/2018/11/15/springboot-long%E5%9E%8BID%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>https://shiyuquan.github.io/2018/11/15/springboot-long型ID精度丢失问题/</id>
    <published>2018-11-15T06:49:28.000Z</published>
    <updated>2018-11-15T07:30:59.966Z</updated>
    
    <content type="html"><![CDATA[<p>数据库主键设计为Long，新增查询发现id和数据库不一样，记录了解的信息。<br><a id="more"></a></p><h1 id="问题出现原因"><a href="#问题出现原因" class="headerlink" title="问题出现原因"></a>问题出现原因</h1><p>各语言对long的定义不一样，java的long是2的64次方。而js的number最大为2的54次方-1。所以用json传递的时候就可能会出现数据丢失的问题。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>我采用的解决方法是将数据转json时，将long型转成string，字符串不存在精度的问题。</p><h2 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h2><p>在MvcConfig配置json配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageCoverter&lt;?&gt; converters)</span> </span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter jsonConverter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(<span class="keyword">long</span>.class, ToStringSerializer.instance);</span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        jsonConverter.setObjectMapper(objectMapper);</span><br><span class="line">        converters.add(jsonConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="单字段设置"><a href="#单字段设置" class="headerlink" title="单字段设置"></a>单字段设置</h2><p>实体类字段上加如下注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using=ToStringSerializer.class)</span><br></pre></td></tr></table></figure></p><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库主键设计为Long，新增查询发现id和数据库不一样，记录了解的信息。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>java类加载顺序</title>
    <link href="https://shiyuquan.github.io/2018/11/05/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
    <id>https://shiyuquan.github.io/2018/11/05/java类加载顺序/</id>
    <published>2018-11-05T03:06:01.000Z</published>
    <updated>2018-11-05T04:39:21.835Z</updated>
    
    <content type="html"><![CDATA[<p>阅读《java编程思想》看到了java类加载的一点东西，通过查阅资料总结一下我对java类加载顺序的个人理解<br><a id="more"></a></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序:"></a>初始化顺序:</h2><ol><li>为静态变量、方法分配内存并赋值(静态方法后面大括号语句不执行，只初始化),执行静态代码块(立刻执行大括号里面的语句)。静态加载顺序自上而下。</li><li>初始化构造方法(只初始化，等待非静态属性加载)</li><li>为非静态属性分配内存并赋值</li><li>执行构造代码块(构造代码块在每次创建对象的时候都会执行一次)</li><li>执行构造方法</li><li>非静态代码块 或 静态方法(调用才加载)。</li></ol><h2 id="如果有继承关系"><a href="#如果有继承关系" class="headerlink" title="如果有继承关系"></a>如果有继承关系</h2><ol><li>父类静态方法成员变量代码块</li><li>子类静态方法成员变量代码块</li><li>父类构造方法初始化</li><li>子类构造方法初始化</li><li>父类非静态属性分配内存并赋值</li><li>子类非静态属性分配内存并赋值</li><li>执行父类构造代码块</li><li>执行父类构造方法</li><li>执行子类构造代码块</li><li>执行子类构造方法</li></ol><p>接口、内部类等，调用时加载</p><h2 id="main方法怎么执行的呢？"><a href="#main方法怎么执行的呢？" class="headerlink" title="main方法怎么执行的呢？"></a>main方法怎么执行的呢？</h2><p>参考博客(<a href="https://www.cnblogs.com/iceAeterNa/p/4876940.html" target="_blank" rel="noopener">https://www.cnblogs.com/iceAeterNa/p/4876940.html</a>)</p><blockquote><p>java应用程序的启动在在/hotspot/src/share/tools/launcher/java.c的main()函数中，而在虚拟机初始化过程中，将创建并启动Java的Main线程。最后将调用JNIEnv的CallStaticVoidMethod()来执行main方法。<br>CallStaticVoidMethod()对应的jni函数为jni_CallStaticVoidMethod，定义在/hotspot/src/share/vm/prims/jni.cpp中，而jni_CallStaticVoidMethod()又调用了jni_invoke_static()，jni_invoke_static()通过JavaCalls的call()发起对Java方法的调用</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读《java编程思想》看到了java类加载的一点东西，通过查阅资料总结一下我对java类加载顺序的个人理解&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://shiyuquan.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>学习工作中遇见的异常</title>
    <link href="https://shiyuquan.github.io/2018/11/01/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E8%A7%81%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
    <id>https://shiyuquan.github.io/2018/11/01/学习工作中遇见的异常/</id>
    <published>2018-11-01T01:47:06.000Z</published>
    <updated>2018-11-01T01:49:00.672Z</updated>
    
    <content type="html"><![CDATA[<p>自二〇一八年十一月一日 农历九月廿四 始<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自二〇一八年十一月一日 农历九月廿四 始&lt;br&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://shiyuquan.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>为什么c++比java快</title>
    <link href="https://shiyuquan.github.io/2018/10/23/%E4%B8%BA%E4%BB%80%E4%B9%88c-%E6%AF%94java%E5%BF%AB/"/>
    <id>https://shiyuquan.github.io/2018/10/23/为什么c-比java快/</id>
    <published>2018-10-23T02:49:59.000Z</published>
    <updated>2018-10-23T02:54:12.649Z</updated>
    
    <content type="html"><![CDATA[<p>摘自《Java编程思想》 第五版<br><a id="more"></a></p><p>……<br>最重要的问题之一是对象的创建及破坏方式。对象需要的数据位于哪儿，如何控制对象的“存在时间”呢？针对这个问题，解决的方案是各异其趣的。C++认为程序的执行效率是最重要的一个问题，所以它允许程序员作出选择。为获得最快的运行速度，存储以及存在时间可在编写程序时决定，只需将对象放置在堆栈（有时也叫作自动或定域变量）或者静态存储区域即可。这样便为存储空间的分配和释放提供了一个优先级。某些情况下，这种优先级的控制是非常有价值的。然而，我们同时也牺牲了灵活性，因为在编写程序时，必须知道对象的准确的数量、存在时间、以及类型。如果要解决的是一个较常规的问题，如计算机辅助设计、仓储管理或者空中交通控制，这一方法就显得太局限了。<br>第二个方法是在一个内存池中动态创建对象，该内存池亦叫“堆”或者“内存堆”。若采用这种方式，除非进入运行期，否则根本不知道到底需要多少个对象，也不知道它们的存在时间有多长，以及准确的类型是什么。这些参数都在程序正式运行时才决定的。若需一个新对象，只需在需要它的时候在内存堆里简单地创建它即可。由于存储空间的管理是运行期间动态进行的，所以在内存堆里分配存储空间的时间比在堆栈里创建的时间长得多（在堆栈里创建存储空间一般只需要一个简单的指令，将堆栈指针向下或向下移动即可）。由于动态创建方法使对象本来就倾向于复杂，所以查找存储空间以及释放它所需的额外开销不会为对象的创建造成明显的影响。除此以外，更大的灵活性对于常规编程问题的解决是至关重要的。<br>C++允许我们决定是在写程序时创建对象，还是在运行期间创建，这种控制方法更加灵活。大家或许认为既然它如此灵活，那么无论如何都应在内存堆里创建对象，而不是在堆栈中创建。但还要考虑另外一个问题，亦即对象的“存在时间”或者“生存时间”（Lifetime）。若在堆栈或者静态存储空间里创建一个对象，编译器会判断对象的持续时间有多长，到时会自动“破坏”或者“清除”它。程序员可用两种方法来破坏一个对象：用程序化的方式决定何时破坏对象，或者利用由运行环境提供的一种“垃圾收集器”特性，自动寻找那些不再使用的对象，并将其清除。当然，垃圾收集器显得方便得多，但要求所有应用程序都必须容忍垃圾收集器的存在，并能默许随垃圾收集带来的额外开销。但这并不符合 C++语言的设计宗旨，所以未能包括到 C++里。但 Java 确实提供了一个垃圾收集器（Smalltalk 也有这样的设计；尽管 Delphi 默认为没有垃圾收集器，但可选择安装；而 C++亦可使用一些由其他公司开发的垃圾收集产品）。<br>……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘自《Java编程思想》 第五版&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>学习路线</title>
    <link href="https://shiyuquan.github.io/2018/10/22/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://shiyuquan.github.io/2018/10/22/学习路线/</id>
    <published>2018-10-22T09:08:55.000Z</published>
    <updated>2018-10-22T09:11:30.532Z</updated>
    
    <content type="html"><![CDATA[<p>厉害的人总是让人惊叹，也不能慢了自己的脚步<br><a id="more"></a></p><p>大致学习路线，根据某博主的建议，感觉挺好，中间肯定会有顺序上的调节和合并学习点的进行。<br>Java基础的升级版<br>– 《Java编程思想》</p><p>设计模式相关<br>– 《head first设计模式》，《大话设计模式》</p><p>代码优化重构<br>– 《重构 改善既有代码的设计》，《effective java》</p><p>虚拟机相关<br>– 《深入理解Java虚拟机》</p><p>并发编程<br>– 《Java并发编程实战》</p><p>jdk<br>– 源码</p><p>制造轮子<br>– 待定…</p><p>选定方向，深度发展</p><p>–<br>中间还应该学习的：<br>spring源码<br>微服务(springcloud,dubbo)<br>性能优化<br>数据库<br>中间件：消息(activemq,rabbitmq,kafuka)，搜索(es4,solr3,lucene2)，缓存(redis)</p><p>然后，基础：算法，数据结构，计算机网络，编译原理<br>方向：ai，虚拟化，大数据等方向等等等等</p><p>想到什么写什么，再做修改。</p><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;厉害的人总是让人惊叹，也不能慢了自己的脚步&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>心怀畏惧，砥砺前行</title>
    <link href="https://shiyuquan.github.io/2018/10/22/%E5%BF%83%E6%80%80%E7%95%8F%E6%83%A7%EF%BC%8C%E7%A0%A5%E7%A0%BA%E5%89%8D%E8%A1%8C/"/>
    <id>https://shiyuquan.github.io/2018/10/22/心怀畏惧，砥砺前行/</id>
    <published>2018-10-22T09:00:39.000Z</published>
    <updated>2018-10-22T09:05:22.452Z</updated>
    
    <content type="html"><![CDATA[<p>一篇杂谈，一点感触<br><a id="more"></a></p><p>今天公司相关负责人说要来前端新人，引起的话题。<br>公司内有个大神，对java底层了解很深（在我看来），我一直以为他是工作多年的，结果聊天的时候才了解到，人家只是两年的开发经验，并且做开发之前是学物理数学的…当时我就惊到了，和我想的出入太大，毕竟在我眼里，他底层了解是我所仰望的星空…<br>突然感到了点无奈和迷茫。在又了解到我的所属上司也就开发三年（我一直以为他有五年…）并且在我眼里springcloud流地飞起的他，其实学习springcloud也就三两个月…说实话，有点伤感，莫名地有股无力感从心底发出…我能赶上他们吗…<br>优秀的人往往就潜伏在身边。自以为是的遮罩让人看不清现实，偶然间的一瞥却又让你心生畏惧！<br>技不如人，也不思进取？<br>非也。心怀畏惧，砥砺前行。<br><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一篇杂谈，一点感触&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://shiyuquan.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>springboot hibernate处理text格式数据</title>
    <link href="https://shiyuquan.github.io/2018/10/14/springboot-hibernate%E5%A4%84%E7%90%86text%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/"/>
    <id>https://shiyuquan.github.io/2018/10/14/springboot-hibernate处理text格式数据/</id>
    <published>2018-10-14T07:56:19.000Z</published>
    <updated>2018-10-14T09:23:34.288Z</updated>
    
    <content type="html"><![CDATA[<p>写博客网站，数据库用mysql，对博文数据的存储采用的数据类型为text，持久层框架用的hibernate，一切看似平静，然而…..<br><a id="more"></a></p><h1 id="问题初现"><a href="#问题初现" class="headerlink" title="问题初现"></a>问题初现</h1><p>直接上代码<br>实体类对应字段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md_content"</span>)</span><br><span class="line"><span class="keyword">private</span> String md;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"html_content"</span>)</span><br><span class="line"><span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"summary"</span>)</span><br><span class="line"><span class="keyword">private</span> String summary;</span><br></pre></td></tr></table></figure></p><p>jpa<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正常来说，单表的增删改我都是用的jpa直接处理，并且成功，但是！！！这里不正常！！！<br><img src="/images/text处理1.png" alt=""><br>通过断点查看，可以发现，数据通过jpa已经查出来了，但是映射不到实体类最终导致报错。<br><img src="/images/text处理2.png" alt=""><br>类型定义错误…<br>毫无头绪的错误，jpa之前用得舒舒服服的呀。抱着试一试的心态，用jdbctemplate写sql查询一次看看<br><img src="/images/text处理3.png" alt=""><br>emmmm，这tm什么鬼，summary有数据，md和html都没有…what？</p><h1 id="锁定问题"><a href="#锁定问题" class="headerlink" title="锁定问题"></a>锁定问题</h1><p>通过上一步的查看，发现是数据库text格式的数据出的错，于是百度谷歌走一遭呗。<br>最终得到结果</p><blockquote><p>hibernate对mysql数据库的数据类型映射里面，没有text…</p></blockquote><p>心累，感觉这不像是hibernate该有的bug，但是谁让他就是不支持呢<br>解决方法有两个</p><ol><li>一是改变hibernate方言，将text支持引用进去。本地写个类，继承MySQL5Dialect，添加注册<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDialect</span> <span class="keyword">extends</span> <span class="title">MySQL5Dialect</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDialect</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        registerHibernateType(Types.DECIMAL, Hibernate.BIG_DECIMAL.getName());</span><br><span class="line">        registerHibernateType(Types.LONGVARCHAR,Hibernate.TEXT.getName());</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后改配置文件的方言为本地改的这个就行…看似完美，呵呵<br>你会发现<code>Hibernate</code>包下没有<code>TEXT</code>这东东，你去<code>Hibernate.TEXT.getName()</code>你点一辈子都没用，我在想网上的人是怎么Hibernate.出来东西的，我这里的 TEXT出轨了？？？</p><ol start="2"><li>好吧，第二种，也是我这里实现的初版，给实体类字段加注解,其中 <code>columnDefinition=&quot;TEXT&quot;</code>也是上一个解决方式要加的，因为上一个方法死娘胎里了就没讲。<br>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里@Lob注解表示属性将被持久化为Blob或者Clob类型，有人说lob是large object，emmm姑且相信吧，text也是lob的一类</span></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="comment">// 懒加载，因为lob数据可能比较大，懒加载让他要用的时候再加载，提高性能。</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="comment">// columnDefinition属性表示创建表时，该字段创建的SQL语句，一般用于通过Entity生成表定义时使用。表示对应数据库的text类型</span></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md_content"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="keyword">private</span> String md;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md_content"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"summary"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="keyword">private</span> String summary;</span><br></pre></td></tr></table></figure></li></ol><p>至此，text的处理基本上完成了<br>对的，基本上</p><h1 id="额外的bug"><a href="#额外的bug" class="headerlink" title="额外的bug"></a>额外的bug</h1><p>发现进过上面的处理，依旧有两个字段没有值，就是一开始的md和html，通过瞎改改解决了，上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="comment">//@Column(name = "md_content", columnDefinition="TEXT")</span></span><br><span class="line"><span class="keyword">private</span> String md;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"html"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="comment">//@Column(name = "html_content", columnDefinition="TEXT")</span></span><br><span class="line"><span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"summary"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="keyword">private</span> String summary;</span><br></pre></td></tr></table></figure></p><p>将column对应的数据库子弹的下划线去掉就可以，至于为什么嘛，我也不懂T-T</p><h1 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h1><p>到现在，依旧没有实现用jpa查询text类型的数据，因为text加不进hibernate方言里面。jdbctemplate可以实现了，然后改了个地方<br>下面是我最终的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md"</span>, columnDefinition=<span class="string">"CLOB"</span>)</span><br><span class="line"><span class="keyword">private</span> String md;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"html"</span>, columnDefinition=<span class="string">"CLOB"</span>)</span><br><span class="line"><span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"summary"</span>, columnDefinition=<span class="string">"CLOB"</span>)</span><br><span class="line"><span class="keyword">private</span> String summary;</span><br></pre></td></tr></table></figure></p><p>我把text改成了clob，因为hibernate没有text支持所以我觉得还是写clob可能会好点<br>在一个就是为什么字段设置下划线查不出数据。还有待调查。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写博客网站，数据库用mysql，对博文数据的存储采用的数据类型为text，持久层框架用的hibernate，一切看似平静，然而…..&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
      <category term="hibernate" scheme="https://shiyuquan.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>vue + ts diy分页组件实现</title>
    <link href="https://shiyuquan.github.io/2018/10/07/vue-ts-diy%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shiyuquan.github.io/2018/10/07/vue-ts-diy分页组件实现/</id>
    <published>2018-10-07T07:14:11.000Z</published>
    <updated>2018-10-07T12:01:49.321Z</updated>
    
    <content type="html"><![CDATA[<p>学着用vue，自己写点东西，边学边做一个博客网站。之前遇见了前台的分页效果，想来自己还没有实现过就将就着用vue来实现一次…emmmmm 满满的坑…<br><a id="more"></a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分页栏的每个显示都是一个小模块(比如页数，上一页，下一页什么的)，因为分页组件显示的字符比较固定，所以我将所有的显示都分了固定的数值，方便之后的填充分页栏数组。具体数值分配如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-2 上一页</span><br><span class="line">-1 下一页</span><br><span class="line">0  表示显示页码以外还有很多页</span><br><span class="line">n  第n页</span><br><span class="line">ps：</span><br><span class="line">首页和尾页用1和最大页数表示</span><br></pre></td></tr></table></figure></p><p>定义好数值分配后，根据查询的分页数据来获得分页组件相关的数据，比如页码，页大小，总页数。<br>根据页码和总页数，来动态生成分页栏数组，举个栗子：<br>假如定义分页栏显示分页的栏目为7，页码为4，总页数为23，那么生成的数组就是[1,2,3,4,5,6,7,0,23,-1]<br>假如页码为10，那么生成数组为[-2,1,0,7,8,9,10,11,12,13,0,23,-1]<br>效果图<br><img src="/images/page1.png" alt=""><br><img src="/images/page2.png" alt=""><br><img src="/images/page3.png" alt=""></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="vue-ts-代码"><a href="#vue-ts-代码" class="headerlink" title="vue ts 代码"></a>vue ts 代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">private homePageService = <span class="keyword">new</span> HomePageService();</span><br><span class="line">private PageSizes: number[] = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]; <span class="comment">// 页大小配置</span></span><br><span class="line">private articlePageDate: any[] = []; <span class="comment">// 页面分页的内容数据</span></span><br><span class="line">private totalPages: number = <span class="number">1</span>; <span class="comment">// 总页数</span></span><br><span class="line">private pageNumber: number = <span class="number">1</span>; <span class="comment">// 页码</span></span><br><span class="line">private showPagesize: number = <span class="number">7</span>; <span class="comment">// 分页栏显示页数</span></span><br><span class="line">private showPageList: any[] = []; <span class="comment">// 分页栏数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载页面请求分页数据，返回结果包含的页码和总页数，页数分页点击事件。</span></span><br><span class="line">private queryForPage(pageNum: number) &#123;</span><br><span class="line">    <span class="comment">// 根据定义的分页数值来判断上一页下一页</span></span><br><span class="line">    <span class="keyword">if</span> (pageNum === <span class="number">-2</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNumber = <span class="keyword">this</span>.pageNumber - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pageNum === <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNumber = <span class="keyword">this</span>.pageNumber + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNumber = pageNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求数据接口</span></span><br><span class="line">    <span class="keyword">this</span>.homePageService.queryForPage(<span class="keyword">this</span>.pageNumber, <span class="keyword">this</span>.PageSizes[<span class="number">2</span>])</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.articlePageDate = res.date;</span><br><span class="line">        <span class="comment">// 获取返回的总页数</span></span><br><span class="line">        <span class="keyword">this</span>.totalPages = <span class="built_in">Number</span>(res.totalPages);</span><br><span class="line">        <span class="comment">// 获取返回的页码</span></span><br><span class="line">        <span class="keyword">this</span>.pageNumber = <span class="built_in">Number</span>(res.pageNumber);</span><br><span class="line">        <span class="comment">// 生成分页数组</span></span><br><span class="line">        <span class="keyword">this</span>.changePages();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页栏数组变化执行事件</span></span><br><span class="line">@Watch(<span class="string">'showPageList'</span>)</span><br><span class="line">private watchShowPageList() &#123;</span><br><span class="line">    <span class="comment">// $nextTick 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</span></span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.pageItemActive();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成分页数组</span></span><br><span class="line">private changePages() &#123;</span><br><span class="line">    <span class="comment">// 重置数组</span></span><br><span class="line">    <span class="keyword">this</span>.showPageList = [];</span><br><span class="line">    <span class="comment">// 分页栏显示数除2，表示当前页码前后显示的多余页码。比如当前页码为10，显示7,8,9,10,11,12,13</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.showPagesize / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 如果当前页-偏移量比1大，显示上一页（«），第一页和中间还有很多页（...）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pageNumber - x &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环页码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.pageNumber - x; i &lt;= <span class="keyword">this</span>.pageNumber + x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; i &lt;= <span class="keyword">this</span>.totalPages) &#123;</span><br><span class="line">            <span class="keyword">this</span>.showPageList.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前页-偏移量比最大页数小，显示下一页（»），最后一页和中间还有很多页（...）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pageNumber + x &lt; <span class="keyword">this</span>.totalPages ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="keyword">this</span>.totalPages);</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态添加class</span></span><br><span class="line">private pageItemActive() &#123;</span><br><span class="line">    <span class="keyword">const</span> pageItems = <span class="built_in">document</span>.getElementsByName(<span class="string">'pageItems'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> pageItems) &#123;</span><br><span class="line">        item.classList.remove(<span class="string">'active'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> pageItems) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.innerHTML.replace(<span class="regexp">/\s+/g</span>, <span class="string">''</span>) === <span class="keyword">this</span>.pageNumber.toString()) &#123;</span><br><span class="line">            item.classList.add(<span class="string">'active'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="html-代码"><a href="#html-代码" class="headerlink" title="html 代码"></a>html 代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul-page"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in showPageList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"queryForPage(n)"</span> <span class="attr">name</span>=<span class="string">"pageItems"</span> <span class="attr">v-if</span>=<span class="string">"n === -2"</span>&gt;</span></span><br><span class="line">                «</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"queryForPage(n)"</span> <span class="attr">name</span>=<span class="string">"pageItems"</span> <span class="attr">v-else-if</span>=<span class="string">"n === -1"</span>&gt;</span></span><br><span class="line">                »</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"pageItems"</span> <span class="attr">v-else-if</span>=<span class="string">"n === 0"</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"queryForPage(n)"</span> <span class="attr">name</span>=<span class="string">"pageItems"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                &#123;&#123; n &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学着用vue，自己写点东西，边学边做一个博客网站。之前遇见了前台的分页效果，想来自己还没有实现过就将就着用vue来实现一次…emmmmm 满满的坑…&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://shiyuquan.github.io/tags/vue/"/>
    
      <category term="typescript" scheme="https://shiyuquan.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>分享vip视频免费看的方法</title>
    <link href="https://shiyuquan.github.io/2018/09/24/%E5%88%86%E4%BA%ABvip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%9C%8B%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://shiyuquan.github.io/2018/09/24/分享vip视频免费看的方法/</id>
    <published>2018-09-24T14:38:10.000Z</published>
    <updated>2018-09-25T01:09:03.575Z</updated>
    
    <content type="html"><![CDATA[<p>分享个小福利，免费看各种VIP的方法。亲测可用(不能用无写来干嘛呢…我是不是有点…emmmmmmm…)<br><a id="more"></a></p><h1 id="百度方法"><a href="#百度方法" class="headerlink" title="百度方法"></a>百度方法</h1><p>百度搜索关键字<code>vip视频解析</code>。大概劳动流程都是打开解析网站，然后找到你想看的vip电影，复制网址，粘贴到解析网站，balabalabala…就可以了。可能有些解析网站没有视频源，可以换一个网站试试。分享几个解析网站吧<br><a href="http://www.5ifxw.com/vip/" target="_blank" rel="noopener">http://www.5ifxw.com/vip/</a><br><a href="http://live.gopartook.com/" target="_blank" rel="noopener">http://live.gopartook.com/</a><br><a href="http://tv.dsqndh.com" target="_blank" rel="noopener">http://tv.dsqndh.com</a><br><a href="http://51.ruyo.net/p/3127.html" target="_blank" rel="noopener">http://51.ruyo.net/p/3127.html</a></p><h2 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h2><p>可能有些人看上面的方法还是不懂操作，那么来演示一遍八<br>爱奇艺为例，打开，到vip电影里面随便点一部，随便选了红色框框的那个什么鬼电影<br><img src="/images/vip解析1.png" alt=""><br>进去后复制网站链接，下面画红色框框的，网址有多少复制多少哦<br><img src="/images/vip解析2.png" alt=""><br>复制好后，某度搜索<code>VIP视频在线解析</code>,嗯有结果了<br><img src="/images/vip解析3.png" alt=""><br>就选第一个来试试<br>进去后往下翻，看见下图有个播放地址的东东，把你刚刚复制的网址粘贴进来，点击开始解析！！<br><img src="/images/vip解析4.png" alt=""><br>然后就可以啦，484很简单(如果提示没有flash，就点它下个)<br><img src="/images/vip解析5.png" alt=""></p><h1 id="谷歌浏览器插件-油猴"><a href="#谷歌浏览器插件-油猴" class="headerlink" title="谷歌浏览器插件(油猴)"></a>谷歌浏览器插件(油猴)</h1><p>谷歌的插件很强大的，国内不给下，科学上网呗(无奈ing)。我这分享了个以前版本的，虽然老吧，还能用…别介哈<br>梯子<a href="https://pan.baidu.com/s/1qSPST6xKhHRWXD5_m9qf8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1qSPST6xKhHRWXD5_m9qf8Q</a> 密码: i55g<br>里面有个<code>Tampermonkey油猴插件.crx</code>的文件，下载拖到谷歌扩展程序里面<br>扩展程序网址输入<code>chrome://extensions/</code>就可以进去了，.crx文件拖进去就行<br><img src="/images/vip解析6.png" alt=""><br>好了后看网址栏右边多了个图标<br><img src="/images/vip解析7.png" alt=""><br>鼠标左键点击-&gt;出来个栏，点击<code>添加新脚本</code>-&gt;点击右上<code>实用工具</code>导航栏-&gt;压缩包那里点击选择文件<br><img src="/images/vip解析8.png" alt=""><br>选择刚刚云盘下载的那个压缩文件，打开就行<br><img src="/images/vip解析9.png" alt=""><br>完了点击已安装脚本<br><img src="/images/vip解析10.png" alt=""><br>好了会有东西的<br>接下来找到你想看的vip视频，还是以爱奇艺为栗子<br>打开爱奇艺，网站左上角有黄色模块，里面都是大神提供的解析网站…就和上面某度的辣个一样一样的<br><img src="/images/vip解析11.png" alt=""><br>还是刚刚的哪一部电影，点进去八，没有会员不给看哒…进去点击左上角的黄色东东，我以无名小站为栗子，点击无名小站<br><img src="/images/vip解析12.png" alt=""><br>会有个新的网站出来，不出意外的话，你就可以看你的vip了。是不是美滋滋。如果提示没有flash，跟提示下载就行。<br><img src="/images/vip解析13.png" alt=""><br>balabalabala…<br>ps：包里面有些其他的功能，安装了用就行，哇卡卡卡。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享个小福利，免费看各种VIP的方法。亲测可用(不能用无写来干嘛呢…我是不是有点…emmmmmmm…)&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java短信接口实现短信验证码注册登录</title>
    <link href="https://shiyuquan.github.io/2018/09/23/java%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95/"/>
    <id>https://shiyuquan.github.io/2018/09/23/java短信接口实现短信验证码注册登录/</id>
    <published>2018-09-23T05:46:00.000Z</published>
    <updated>2018-09-23T07:11:38.052Z</updated>
    
    <content type="html"><![CDATA[<p>springboot项目的短信接口实现，使用三方短信接口平<a href="http://www.miaodiyun.com/" target="_blank" rel="noopener">秒滴</a><br><a id="more"></a></p><h1 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h1><p>我：登录做完啦(一脸舒适)<br>某：看一下？<br>我：来来来<br>balabalabala…..<br>某：完了？<br>我：对啊<br>某：现在都短信验证好吗<br>我：……(打不死你)<br>…<br>…</p><h1 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h1><p>找短信接口-&gt;实现短信api-&gt;生成验证码-&gt;发短信-&gt;保存验证码-&gt;收到短信-&gt;输入验证码-&gt;提交验证-&gt;finish(成不成功看天命吧……)</p><h1 id="注册短信平台"><a href="#注册短信平台" class="headerlink" title="注册短信平台"></a>注册短信平台</h1><p>首先我们没有通信大佬们的支持，emmmm，咋办捏？只能用三方的平台啦(无奈ing)，百啊百度啊度…..决定就是你啦！<a href="http://www.miaodiyun.com/" target="_blank" rel="noopener">秒滴</a>，主要是有免费的一百多条短信可以用，测试开发完全足够了，谁叫我们穷呢？</p><h2 id="注册登录"><a href="#注册登录" class="headerlink" title="注册登录"></a>注册登录</h2><p>这个不多说了。官网 <a href="http://www.miaodiyun.com" target="_blank" rel="noopener">http://www.miaodiyun.com</a></p><h2 id="新建短信模板"><a href="#新建短信模板" class="headerlink" title="新建短信模板"></a>新建短信模板</h2><p>配置管理-&gt;验证码短信模板-&gt;新建模板<br><img src="/images/短信接口1.png" alt=""><br>简历模板提交等待吧(ps 可能不成功，公司尽量写上市的吧…)</p><h2 id="查看token"><a href="#查看token" class="headerlink" title="查看token"></a>查看token</h2><p>模板提交成功后去 用户中心-&gt;账户管理-&gt;查看token 获取token和sid，记住了，等下有用的<br><img src="/images/短信接口2.png" alt=""></p><h2 id="下载官方给的demo源码"><a href="#下载官方给的demo源码" class="headerlink" title="下载官方给的demo源码"></a>下载官方给的demo源码</h2><p>点击API文档<br><img src="/images/短信接口3.png" alt=""><br>进入开发者中心，点击导航栏的demo下载，下载java demo<br><img src="/images/短信接口4.png" alt=""><br>下载完后，自己查看下源码，demo很简单的，使用也就是copy，短信发成功了就是结合自己项目改改代码就行。</p><h1 id="植入源码到springboot项目"><a href="#植入源码到springboot项目" class="headerlink" title="植入源码到springboot项目"></a>植入源码到springboot项目</h1><p>解压下载的demo，看源码，搬砖。我这里使用短信接口实现短信验证码注册功能，附上代码</p><p>项目结构<br><img src="/images/短信接口5.png" alt=""><br>功能需要的文件用框框画上了，一个一个来吧</p><h2 id="config-java"><a href="#config-java" class="headerlink" title="config.java"></a>config.java</h2><p>短信接口的基础配置文件,刚刚官网获取的token和sid需要配置在这里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils.TextMessageCode;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/17 21:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * url前半部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"https://api.miaodiyun.com/20150822"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发者注册后系统自动生成的账号，可在官网登录后查看</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_SID = <span class="string">"114e02e7a1c344f58b5abde18eb1946b"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发者注册后系统自动生成的TOKEN，可在官网登录后查看</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTH_TOKEN = <span class="string">"5a4a30084dc143d29cd0af62dd619f25"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据类型, JSON或XML</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESP_DATA_TYPE = <span class="string">"json"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="CodeUtil-java"><a href="#CodeUtil-java" class="headerlink" title="CodeUtil.java"></a>CodeUtil.java</h2><p>随机6位的验证码工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils.TextMessageCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/17 20:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRandNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String randNum = <span class="keyword">new</span> Random().nextInt(<span class="number">1000000</span>)+<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (randNum.length()!=<span class="number">6</span>) &#123;   <span class="comment">//如果生成的不是6位数随机数则返回该方法继续生成</span></span><br><span class="line">            <span class="keyword">return</span> getRandNum();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> randNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="HttpUtil-java"><a href="#HttpUtil-java" class="headerlink" title="HttpUtil.java"></a>HttpUtil.java</h2><p>http请求的工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils.TextMessageCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/17 21:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造通用参数timestamp、sig和respDataType</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createCommonParam</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 时间戳</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">        String timestamp = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 签名</span></span><br><span class="line">        String sig = DigestUtils.md5Hex(Config.ACCOUNT_SID + Config.AUTH_TOKEN + timestamp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;timestamp="</span> + timestamp + <span class="string">"&amp;sig="</span> + sig + <span class="string">"&amp;respDataType="</span> + Config.RESP_DATA_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     *            功能和操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     *            要post的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(String url, String body)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            OutputStreamWriter out = <span class="keyword">null</span>;</span><br><span class="line">            BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">            URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">            URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置连接参数</span></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">20000</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">            <span class="comment">// 提交数据</span></span><br><span class="line">            out = <span class="keyword">new</span> OutputStreamWriter(conn.getOutputStream(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            out.write(body);</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取返回数据</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">            String line = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">boolean</span> firstLine = <span class="keyword">true</span>; <span class="comment">// 读第一行不加换行符</span></span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (firstLine)</span><br><span class="line">                &#123;</span><br><span class="line">                    firstLine = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    result += System.lineSeparator();</span><br><span class="line">                &#125;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调测试工具方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postHuiDiao</span><span class="params">(String url, String body)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            OutputStreamWriter out = <span class="keyword">null</span>;</span><br><span class="line">            BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">            URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">            URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置连接参数</span></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交数据</span></span><br><span class="line">            out = <span class="keyword">new</span> OutputStreamWriter(conn.getOutputStream(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            out.write(body);</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取返回数据</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">            String line = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">boolean</span> firstLine = <span class="keyword">true</span>; <span class="comment">// 读第一行不加换行符</span></span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (firstLine)</span><br><span class="line">                &#123;</span><br><span class="line">                    firstLine = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    result += System.lineSeparator();</span><br><span class="line">                &#125;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="GetMessage-java"><a href="#GetMessage-java" class="headerlink" title="GetMessage.java"></a>GetMessage.java</h2><p>其他地方通过调用这个类的execute方法发送短信，短信发送接口，验证码存放在redis里面，key-value对应的手机号和验证码。关于redis的使用，可以参考我另外一篇博客<a href="https://shiyuquan.github.io/2018/09/19/springBoot%E4%BD%BF%E7%94%A8redis/">springBoot使用redis</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils.TextMessageCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.vue.vuedemo.utils.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/17 21:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String operation = <span class="string">"/industrySMS/sendSMS"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accountSid = Config.ACCOUNT_SID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码通知短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String tel)</span></span>&#123;</span><br><span class="line">        HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">        CodeUtil codeUtil = <span class="keyword">new</span> CodeUtil();</span><br><span class="line">        <span class="comment">// 获取验证码</span></span><br><span class="line">        String code = codeUtil.getRandNum();</span><br><span class="line">        <span class="comment">// 设置短信内容</span></span><br><span class="line">        String smsContent = <span class="string">"【宝驰信科技】尊敬的用户，您的验证码为"</span>+code;</span><br><span class="line">        String tmpSmsContent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            tmpSmsContent = URLEncoder.encode(smsContent, <span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送的url</span></span><br><span class="line">        String url = Config.BASE_URL + operation;</span><br><span class="line">        <span class="comment">// 发送的请求体</span></span><br><span class="line">        String body = <span class="string">"accountSid="</span> + accountSid + <span class="string">"&amp;to="</span> + tel + <span class="string">"&amp;smsContent="</span> + tmpSmsContent</span><br><span class="line">                + httpUtil.createCommonParam();</span><br><span class="line">        <span class="comment">// post请求</span></span><br><span class="line">        String result = httpUtil.post(url, body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里是个自己挖的坑，还好平台返回的格式固定，我就截取了字符串做判断，其实平台有提供回调方法的，我当时懒得动...你懂的，想看的话去源码找吧，在huidiao包里面</span></span><br><span class="line">        <span class="keyword">char</span>[] res = result.toCharArray();</span><br><span class="line">        String codeResult = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">13</span>; i&lt;=<span class="number">17</span>; i++)&#123;</span><br><span class="line">            codeResult = codeResult + String.valueOf(res[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 00000代表成功了</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"00000"</span>.equals(codeResult)) &#123;</span><br><span class="line">            <span class="comment">// 发送成功后将电话号码和验证码存在redis，设置有效期为5分钟。之后前台要发送验证需要在redis查询是否有记录</span></span><br><span class="line">            redisService.set(tel, code, <span class="number">300L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> codeResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MyResult&lt;User&gt; <span class="title">addUser</span><span class="params">(@RequestBody User user, @RequestParam String checkNum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(user.getUserName())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"请输入账号"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(userService.findUser(user.getUserName()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"账号已存在，请重新输入"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(user.getPhoneNum())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"请输入手机号"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(user.getPassword())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"请输入密码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证码非空判断</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(checkNum)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"请输入验证码"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 验证码非空，获取redis存的手机号对应的验证码，进行验证，失败balabalabala，否则成功</span></span><br><span class="line">        String code = (String)redisService.get(user.getPhoneNum());</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"验证码不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!checkNum.equals(code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"验证码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    user.setUserId(UUID.randomUUID().toString());</span><br><span class="line">    user.setId(UUID.randomUUID().toString());</span><br><span class="line">    User user1 = userService.addUser(user);</span><br><span class="line">    <span class="keyword">if</span>(user1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(user1, <span class="number">600</span>, <span class="string">"新增失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().success(user1, <span class="number">200</span>, <span class="string">"success"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取验证码接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/getcode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MyResult&lt;String&gt; <span class="title">sendMessage</span><span class="params">(@RequestParam String phoneNum)</span> </span>&#123;</span><br><span class="line">    String res = getMessage.execute(phoneNum);</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"00000"</span>.equals(res)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;String&gt;().success(<span class="keyword">null</span>, <span class="number">200</span>, getMessage.execute(phoneNum));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;String&gt;().success(<span class="keyword">null</span>, <span class="number">200</span>, <span class="string">"获取验证码失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;springboot项目的短信接口实现，使用三方短信接口平&lt;a href=&quot;http://www.miaodiyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;秒滴&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
      <category term="短信接口" scheme="https://shiyuquan.github.io/tags/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>springBoot使用redis</title>
    <link href="https://shiyuquan.github.io/2018/09/19/springBoot%E4%BD%BF%E7%94%A8redis/"/>
    <id>https://shiyuquan.github.io/2018/09/19/springBoot使用redis/</id>
    <published>2018-09-19T02:56:21.000Z</published>
    <updated>2018-09-19T03:21:09.522Z</updated>
    
    <content type="html"><![CDATA[<p>学习redis在springboot环境下的部署，使用RedisTemplate操作。springboot版本为:2.0.4<br><a id="more"></a></p><h1 id="pom-xml引用依赖"><a href="#pom-xml引用依赖" class="headerlink" title="pom.xml引用依赖"></a>pom.xml引用依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h1><p>加入redis配置。我使用Lettuce配置redis启动失败，原因未知。改用jedis后成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">    #意思是连接了1000毫秒后没接连成功就断开连接。</span><br><span class="line">    timeout: 1000</span><br><span class="line">    #Lettuce 当多线程使用同一连接实例时，是线程安全的 jedis不安全</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        #最大空闲数</span><br><span class="line">        max-idle: 8</span><br><span class="line">        #连接池的最大数据库连接数。设为0表示无限制</span><br><span class="line">        max-active: 0</span><br><span class="line">        #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。</span><br><span class="line">        max-wait: 1000</span><br></pre></td></tr></table></figure></p><h1 id="RedisConfig-java"><a href="#RedisConfig-java" class="headerlink" title="RedisConfig.java"></a>RedisConfig.java</h1><p>redis配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/18 20:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置缓存有效期</span></span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofSeconds(<span class="number">5</span>));</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(mapper);</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate stringRedisTemplate = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        stringRedisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用RedisTemplate访问Redis数据结构"><a href="#使用RedisTemplate访问Redis数据结构" class="headerlink" title="使用RedisTemplate访问Redis数据结构"></a>使用RedisTemplate访问Redis数据结构</h1><p>感谢大神的分享<a href="https://www.jianshu.com/p/7bf5dc61ca06/" target="_blank" rel="noopener">https://www.jianshu.com/p/7bf5dc61ca06/</a></p><h1 id="RedisTemplate二次封装-RedisService-java"><a href="#RedisTemplate二次封装-RedisService-java" class="headerlink" title="RedisTemplate二次封装 RedisService.java"></a>RedisTemplate二次封装 RedisService.java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/18 20:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存设置时效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value, Long expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            redisTemplate.expire(key, expireTime, TimeUnit.SECONDS);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePattern</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</span><br><span class="line">        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);</span><br><span class="line">        <span class="keyword">if</span> (keys.size() &gt; <span class="number">0</span>)</span><br><span class="line">            redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exists(key)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存中是否有对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        result = operations.get(key);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hmSet</span><span class="params">(String key, Object hashKey, Object value)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class="line">        hash.put(key,hashKey,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hmGet</span><span class="params">(String key, Object hashKey)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt;  hash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> hash.get(key,hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lPush</span><span class="params">(String k,Object v)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        list.rightPush(k,v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String k, <span class="keyword">long</span> l, <span class="keyword">long</span> l1)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        <span class="keyword">return</span> list.range(k,l,l1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        set.add(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">setMembers</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        <span class="keyword">return</span> set.members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zAdd</span><span class="params">(String key,Object value,<span class="keyword">double</span> scoure)</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        zset.add(key,value,scoure);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByScore</span><span class="params">(String key,<span class="keyword">double</span> scoure,<span class="keyword">double</span> scoure1)</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        <span class="keyword">return</span> zset.rangeByScore(key, scoure, scoure1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习redis在springboot环境下的部署，使用RedisTemplate操作。springboot版本为:2.0.4&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>redis安装使用</title>
    <link href="https://shiyuquan.github.io/2018/09/19/redis%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://shiyuquan.github.io/2018/09/19/redis安装使用/</id>
    <published>2018-09-19T01:59:54.000Z</published>
    <updated>2018-09-19T03:18:10.433Z</updated>
    
    <content type="html"><![CDATA[<p>做手机短信验证的时候，考虑验证码的存放问题使用说明方式。因为验证码的时效性，放入关系数据库可以实现，但是较麻烦。最终想到缓存可以完美实现，正好没用过也想学redis，就顺带学习redis使用和安装。<br><a id="more"></a></p><h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。<br>中文官网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><h1 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h1><p>参考<a href="https://www.cnblogs.com/NiceCui/p/7794659.html" target="_blank" rel="noopener">https://www.cnblogs.com/NiceCui/p/7794659.html</a></p><h1 id="Redis-Windows-安装"><a href="#Redis-Windows-安装" class="headerlink" title="Redis Windows 安装"></a>Redis Windows 安装</h1><p>下载链接: <a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a><br>1.redis本身没有提供微软的redis，windows下的redis由微软自己提供的。点击下载链接 找到redis-x64-*.zip点击下载。<br>2.解压文件到自己制定的位置，我放在E:\Redis目录下，至此redis安装完成</p><h1 id="Redis-使用"><a href="#Redis-使用" class="headerlink" title="Redis 使用"></a>Redis 使用</h1><ol><li>win+r 输入cmd打开命令工具</li><li><p>进入安装目录启动redis 命令：redis-server.exe redis.windows.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:</span><br><span class="line">CD Redis</span><br><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></li><li><p>测试链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure></li></ol><p>-h 127.0.0.1 是host<br>-p 6379 是端口<br>插入键值对试一下 set key value,对应键值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set name shiyuquan</span><br></pre></td></tr></table></figure></p><p>查看指定键的值 get key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get name</span><br></pre></td></tr></table></figure></p><p>得到结果 shiyuquan</p><p>redis命令参考 <a href="http://www.redis.net.cn/order/" target="_blank" rel="noopener">http://www.redis.net.cn/order/</a></p><h1 id="Redis-图形界面"><a href="#Redis-图形界面" class="headerlink" title="Redis 图形界面"></a>Redis 图形界面</h1><p>市面上的图形界面有很多，我这里选用了国人开发的<a href="http://www.treesoft.cn/dms.html" target="_blank" rel="noopener">TreeNMS</a><br>进官网，下载TreeNMS for Redis<br>解压zip到你指定的位置，进去看<code>说明.txt</code>跟着做就行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做手机短信验证的时候，考虑验证码的存放问题使用说明方式。因为验证码的时效性，放入关系数据库可以实现，但是较麻烦。最终想到缓存可以完美实现，正好没用过也想学redis，就顺带学习redis使用和安装。&lt;br&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://shiyuquan.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>markdown 语法</title>
    <link href="https://shiyuquan.github.io/2018/09/14/markdown-0/"/>
    <id>https://shiyuquan.github.io/2018/09/14/markdown-0/</id>
    <published>2018-09-14T06:16:37.000Z</published>
    <updated>2018-09-14T06:19:25.406Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇博客，记录博客写法。博客使用<a href="http://www.markdown.cn/" target="_blank" rel="noopener">markdown</a>语法，本文记录其大致语法规范<br><a id="more"></a></p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>根据标题生成目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure></p><p>示例(..没兼容到)<br>[TOC]</p><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br><span class="line">or</span><br><span class="line">一级标题</span><br><span class="line">===</span><br><span class="line">二级标</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>示例</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标"><a href="#二级标" class="headerlink" title="二级标"></a>二级标</h2><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用的</span><br><span class="line">&gt;&gt;这也是</span><br></pre></td></tr></table></figure><p>示例</p><blockquote><p>引用的</p><blockquote><p>这也是</p></blockquote></blockquote><h2 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*这是斜体* 或 _这也是斜体_ </span><br><span class="line">**这是粗体**</span><br><span class="line">***这是加粗斜体***</span><br><span class="line">~~这是删除线~~</span><br></pre></td></tr></table></figure><p>示例<br><em>这是斜体</em> 或 <em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>balabala</p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单行代码：代码之间分别用一个反引号包起来</span><br><span class="line">代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行,三个反引号后加编程语言，提供颜色支持</span><br><span class="line">tab缩进：</span><br></pre></td></tr></table></figure><p>示例<br>单行代码<br><code>balabala</code><br>代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">balabala</span><br></pre></td></tr></table></figure></p><pre><code>巴腊拉巴</code></pre><p>javascript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    num+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure></p><p>java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br><span class="line">行内形式：[我的博客](https://kevinpu.github.io/)</span><br><span class="line">参考形式：[我的博客][1]，有一个很好的平台-[简书][2]</span><br><span class="line">[1]:https://kevinpu.github.io/</span><br><span class="line">[2]:http://www.jianshu.com/</span><br><span class="line">自动链接：我的博客地址&lt;https://kevinpu.github.io/&gt;</span><br></pre></td></tr></table></figure><p>示例<br>行内形式：<a href="https://kevinpu.github.io/" target="_blank" rel="noopener">我的博客</a><br>参考形式：[我的博客][1]，有一个很好的平台-[简书][2]<br>[1]:<a href="https://kevinpu.github.io/" target="_blank" rel="noopener">https://kevinpu.github.io/</a><br>[2]:<a href="http://www.jianshu.com/" target="_blank" rel="noopener">http://www.jianshu.com/</a><br>自动链接：我的博客地址<a href="https://kevinpu.github.io/" target="_blank" rel="noopener">https://kevinpu.github.io/</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表：<br>无序列表用 - + * 任何一种都可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure></p><p>无序列表效果：</p><ul><li>无序列表项1</li></ul><ul><li>无序列表项2</li></ul><ul><li>无序列表项3</li></ul><p>有序列表：<br>有序列表使用数字加点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.有序列表项1</span><br><span class="line">2.有序列表项2</span><br><span class="line">3.有序列表项3</span><br></pre></td></tr></table></figure></p><p>有序列表效果：<br>1.有序列表项1<br>2.有序列表项2<br>3.有序列表项3</p><p>列表嵌套：</p><ul><li>无序列表项1<ul><li>二级</li><li>二级</li></ul></li></ul><ul><li>无序列表项2</li></ul><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例<br><img src="/images/logo.png" alt="&quot;vue&quot;" title="vue"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例<br>| 表头1|表头2|表头3|表头4<br>|-| :- | :-: | -: |<br>|默认左对齐|左对齐|居中对其|右对齐|<br>|默认左对齐|左对齐|居中对其|右对齐|<br>|默认左对齐|左对齐|居中对其|右对齐|</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一篇博客，记录博客写法。博客使用&lt;a href=&quot;http://www.markdown.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;markdown&lt;/a&gt;语法，本文记录其大致语法规范&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="https://shiyuquan.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="markdown" scheme="https://shiyuquan.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>

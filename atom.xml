<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shiyuquan.github.io/"/>
  <updated>2019-01-25T05:24:32.443Z</updated>
  <id>https://shiyuquan.github.io/</id>
  
  <author>
    <name>大腿君的大腿君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录看完java编程思想</title>
    <link href="https://shiyuquan.github.io/2019/01/25/%E8%AE%B0%E5%BD%95%E7%9C%8B%E5%AE%8Cjava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    <id>https://shiyuquan.github.io/2019/01/25/记录看完java编程思想/</id>
    <published>2019-01-25T02:19:13.000Z</published>
    <updated>2019-01-25T05:24:32.443Z</updated>
    
    <content type="html"><![CDATA[<p>前些天勉强算是看完了java编程思想，细想来有很多的东西说，碍于本身表达能力不足且对书的理解不到位，在这里就现在能想的随便说说<br><a id="more"></a><br>从开始看这本书到现在，过去了将近五个月。开始看书的基础部分，前几章的时候，看得很快，感觉大多数都是我知道的，但也有很多操作让我耳目一新。这个过程过地很快，就打算一两个月看完的。</p><p>事实证明我还是年轻的。前几章基础的东西依旧让我受益良多，当书本开始有更深的讲解时，我发现我可能一页纸就要想好久。作者讲的很透彻，其思想让我着迷。而愚昧如我，还是很难理解其中的奥秘。书中讲述其实也不全是基础。其中涉及到了很多的涉及模式，这是最让我废时间去理解的地方。往往没见识到一种新的设计模式我都会感叹：代码还能这样写。着实让我认识到了编程是非常需要想法的。</p><p>看书是在工作之余的时间进行的。</p><p>从看书到现在，花费时间多的一个原因就是需要工作。但这其实在我预期的，却超出了预期的时间。另外一个点就是设计模式的理解。最后就是看书的过程中，结合着书本所讲的方面，顺带看了些jdk的源码。看源码也是非常花费时间的。源码里面涉及到了很多的算法，需要花时间研究。源码里面无时无刻不关联设计模式，往往看代码能懂他干嘛用，却不懂为何这样用，更甚者，不了解设计模式的话代码都看不懂。看源码的过程痛并快乐着。他们的代码简洁明了，风格清晰。对比我所接触的开发中的代码，我都嫌弃我自己。但就现在接触，自认为代码比上他人还是有所优势的。</p><p>源码过程有个副产品。是个针对当下的副产品，却是以后必备的知识–jvm。就java展现在众人面前的东西仅仅是给人用的。其中很多的流向，或者更深的层次是我们所看不到的，如果想要了解就必须学习jvm。其实jdk源码就涉及到了c语言和汇编，这又是两个硬骨头，难办。</p><p>最后说一下，java编程思想我实际上是没看完的，i/o和并发的章节没看，原因是这两部分的内容我将会在接下来学习的路线中，做专门的学习。图形化的章节没看是因为当下，或者以后可能都用不到。</p><p>看这本书的初衷，是想要提升技术能力并加强基础知识的理解。而其更让我惊艳的是它所表现出来的思想。严谨而华丽。</p><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天勉强算是看完了java编程思想，细想来有很多的东西说，碍于本身表达能力不足且对书的理解不到位，在这里就现在能想的随便说说&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://shiyuquan.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>时间处理类</title>
    <link href="https://shiyuquan.github.io/2019/01/23/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E7%B1%BB/"/>
    <id>https://shiyuquan.github.io/2019/01/23/时间处理类/</id>
    <published>2019-01-23T02:15:21.000Z</published>
    <updated>2019-01-23T02:32:44.235Z</updated>
    
    <content type="html"><![CDATA[<p>时间处理工具类<br><a id="more"></a></p><h1 id="org-joda"><a href="#org-joda" class="headerlink" title="org.joda"></a>org.joda</h1><p><a href="https://www.joda.org/" target="_blank" rel="noopener">joda官网</a>, 这个org提供的不仅仅是时间处理类，还有money，beans，collect等。本文是org.joda.time做的DateTimeUtils</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-jodatime.html" target="_blank" rel="noopener">参考网站</a><br><a href="http://joda-time.sourceforge.net/apidocs/index.html" target="_blank" rel="noopener">apidoc</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.Days;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期时间工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年(yyyy)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR = <span class="string">"yyyy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年-月(yyyy-MM)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR_MONTH = <span class="string">"yyyy-MM"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年-月-日(yyyy-MM-dd)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR_MONTH_DAY = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年月日(yyyyMMdd)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR_MONTH_DAY_SIMPLE = <span class="string">"yyyyMMdd"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年-月-日 小时(yyyy-MM-dd HH)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR_MONTH_DAY_HOUR = <span class="string">"yyyy-MM-dd HH"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年-月-日 小时(yyyy-MM-dd HH)中文输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR_MONTH_DAY_HOUR_CN = <span class="string">"yyyy年MM月dd日HH时"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年-月-日 小时:分钟(yyyy-MM-dd HH:mm)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR_MONTH_DAY_HOUR_MINUTE = <span class="string">"yyyy-MM-dd HH:mm"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年-月-日 小时:分钟:秒钟(yyyy-MM-dd HH:mm:ss)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR_MONTH_DAY_HOUR_MINUTE_SECOND = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年月日小时分钟秒钟(yyyyMMddHHmmss)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String YEAR_MONTH_DAY_HOUR_MINUTE_SECOND_SIMPLE = <span class="string">"yyyyMMddHHmmss"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小时:分钟:秒钟(HH:mm:ss)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOUR_MINUTE_SECOND = <span class="string">"HH:mm:ss"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小时:分钟(HH:mm)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOUR_MINUTE = <span class="string">"HH:mm"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 月.日(M.d)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MONTH_DAY = <span class="string">"M.d"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一天的秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DAY_SECOND = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一小时的秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HOUR_SECOND = <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一分钟的秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINUTE_SECOND = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化日期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date    Date对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 格式化后的日期时间字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DateTime(date).toString(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化日期时间字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 日期时间字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern    模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Date对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">formatDateString</span><span class="params">(String dateString, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(pattern);</span><br><span class="line">            <span class="keyword">return</span> dateTimeFormatter.parseDateTime(dateString).toDate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据秒数获得x天x小时x分钟x秒字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> second 秒数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> x天x小时x分钟x秒字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDayHourMinuteSecond</span><span class="params">(<span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (second == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0秒"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> days = second / DAY_SECOND;</span><br><span class="line">        <span class="keyword">if</span> (days &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(days);</span><br><span class="line">            sb.append(<span class="string">"天"</span>);</span><br><span class="line">            second -= days * DAY_SECOND;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> hours = second / HOUR_SECOND;</span><br><span class="line">        <span class="keyword">if</span> (hours &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(hours);</span><br><span class="line">            sb.append(<span class="string">"小时"</span>);</span><br><span class="line">            second -= hours * HOUR_SECOND;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> minutes = second / MINUTE_SECOND;</span><br><span class="line">        <span class="keyword">if</span> (minutes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(minutes);</span><br><span class="line">            sb.append(<span class="string">"分钟"</span>);</span><br><span class="line">            second -= minutes * MINUTE_SECOND;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (second &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(second);</span><br><span class="line">            sb.append(<span class="string">"秒"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据秒数获得x天x小时x分钟字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> second 秒数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> x天x小时x分钟字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDayHourMinute</span><span class="params">(<span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (second == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0分钟"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> days = second / DAY_SECOND;</span><br><span class="line">        <span class="keyword">if</span> (days &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(days);</span><br><span class="line">            sb.append(<span class="string">"天"</span>);</span><br><span class="line">            second -= days * DAY_SECOND;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> hours = second / HOUR_SECOND;</span><br><span class="line">        <span class="keyword">if</span> (hours &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(hours);</span><br><span class="line">            sb.append(<span class="string">"小时"</span>);</span><br><span class="line">            second -= hours * HOUR_SECOND;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> minutes = second / MINUTE_SECOND;</span><br><span class="line">        <span class="keyword">if</span> (minutes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(minutes);</span><br><span class="line">            sb.append(<span class="string">"分钟"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取只含有年月日的DateTime对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateTime DateTime对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 只含有年月日的DateTime对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateTime <span class="title">getDateOnly</span><span class="params">(DateTime dateTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DateTime(dateTime.toString(YEAR_MONTH_DAY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前周的周一和下周一</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 日期数组（索引0为周一，索引1为下周一）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date[] getMondayAndNextMonday() &#123;</span><br><span class="line">        DateTime dateTime = getDateOnly(<span class="keyword">new</span> DateTime());</span><br><span class="line">        DateTime monday = dateTime.dayOfWeek().withMinimumValue();</span><br><span class="line">        DateTime nextMonday = monday.plusDays(<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date[]&#123;monday.toDate(), nextMonday.toDate()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定时间的周一和周日</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateTime DateTime对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 日期数组（索引0为周一，索引1为周日）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date[] getMondayAndSunday(DateTime dateTime) &#123;</span><br><span class="line">        dateTime = getDateOnly(dateTime);</span><br><span class="line">        DateTime monday = dateTime.dayOfWeek().withMinimumValue();</span><br><span class="line">        DateTime sunday = monday.plusDays(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date[]&#123;monday.toDate(), sunday.toDate()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和当前时间相比的天数差（正数为大于天数，负数为小于天数，零为同一天）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date Date对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 和当前时间相比的天数差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareDaysWithNow</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Days.daysBetween(<span class="keyword">new</span> DateTime(), <span class="keyword">new</span> DateTime(date)).getDays();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和今天相比的天数差（正数为大于天数，负数为小于天数，零为同一天）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date Date对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 和今天相比的天数差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareDaysWithToday</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        DateTime today = <span class="keyword">new</span> DateTime();</span><br><span class="line">        today = <span class="keyword">new</span> DateTime(today.getYear(), today.getMonthOfYear(), today.getDayOfMonth(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        DateTime compareDay = <span class="keyword">new</span> DateTime(date);</span><br><span class="line">        compareDay = <span class="keyword">new</span> DateTime(compareDay.getYear(), compareDay.getMonthOfYear(), compareDay.getDayOfMonth(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> Days.daysBetween(today, compareDay).getDays();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较时间a到时间b的天数差</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 时间a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 时间b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 相差天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareDaysWithDay</span><span class="params">(Date a, Date b)</span> </span>&#123;</span><br><span class="line">        DateTime today = <span class="keyword">new</span> DateTime(b);</span><br><span class="line">        today = <span class="keyword">new</span> DateTime(today.getYear(), today.getMonthOfYear(), today.getDayOfMonth(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        DateTime compareDay = <span class="keyword">new</span> DateTime(a);</span><br><span class="line">        compareDay = <span class="keyword">new</span> DateTime(compareDay.getYear(), compareDay.getMonthOfYear(), compareDay.getDayOfMonth(), <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> Days.daysBetween(today, compareDay).getDays();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个时间是否相等（省略毫秒）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date        Date对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> compareDate 比较Date对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否相等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compareDateIgnoreMillisecond</span><span class="params">(Date date, Date compareDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span> &amp;&amp; compareDate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (date == <span class="keyword">null</span> &amp;&amp; compareDate != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (date != <span class="keyword">null</span> &amp;&amp; compareDate == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (date.getTime() / <span class="number">1000</span> == compareDate.getTime() / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据秒数获取天数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> second 秒数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">(<span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> second / DAY_SECOND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取和今天相比的日期字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date Date对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 和今天相比的日期字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCompareWithTodayDateString</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> days = Math.abs(DateTimeUtils.compareDaysWithToday(date));</span><br><span class="line">        String dateString = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (days == <span class="number">0</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"今天"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days == <span class="number">1</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"昨天"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days == <span class="number">2</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"2天前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days == <span class="number">3</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"3天前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days == <span class="number">4</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"4天前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days == <span class="number">5</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"5天前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days == <span class="number">6</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"6天前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; <span class="number">6</span> &amp;&amp; days &lt;= <span class="number">14</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"1周前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; <span class="number">14</span> &amp;&amp; days &lt;= <span class="number">21</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"2周前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; <span class="number">21</span> &amp;&amp; days &lt;= <span class="number">30</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"3周前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; <span class="number">30</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"1月前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; <span class="number">365</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"1年前"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; <span class="number">365</span> * <span class="number">3</span>) &#123;</span><br><span class="line">            dateString = <span class="string">"3年前"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dateString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较两个时间相差分钟数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> now         当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> compareDate 比较时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 相差分钟数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareMinutes</span><span class="params">(Date now, Date compareDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (now.getTime() - compareDate.getTime()) / <span class="number">60000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较时间是本月的第几天</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDayOfMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        DateTime dateTime = <span class="keyword">new</span> DateTime(date);</span><br><span class="line">        <span class="keyword">return</span> dateTime.getDayOfMonth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算当月有几天</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDateOfMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        DateTime dateTime = <span class="keyword">new</span> DateTime(date);</span><br><span class="line">        <span class="keyword">return</span> dateTime.dayOfMonth().getMaximumValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定时间,判断该时间到现在时间的年数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date 指定时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 到现在时间的年数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareYear</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        DateTime btd = <span class="keyword">new</span> DateTime(date);</span><br><span class="line">        DateTime nowDate = <span class="keyword">new</span> DateTime();</span><br><span class="line">        <span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nowDate.getMonthOfYear() &gt; btd.getMonthOfYear()) &#123;</span><br><span class="line">            year = nowDate.getYear() - btd.getYear();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nowDate.getMonthOfYear() &lt; btd.getMonthOfYear()) &#123;</span><br><span class="line">            year = nowDate.getYear() - btd.getYear() - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nowDate.getMonthOfYear() == btd.getMonthOfYear()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nowDate.getDayOfMonth() &gt;= btd.getDayOfMonth()) &#123;</span><br><span class="line">                year = nowDate.getYear() - btd.getYear();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                year = nowDate.getYear() - btd.getYear() - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断2个时间的时间差 返回字符串形式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date  要对比的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date2 要对比的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串形式 如1小时 ，2天2小时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">compareDaysWithDate</span><span class="params">(Date date, Date date2)</span> </span>&#123;</span><br><span class="line">        StringBuilder msg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> minutes = (<span class="keyword">int</span>) Math.abs((date.getTime() - date2.getTime()) / <span class="number">60000</span>);</span><br><span class="line">        <span class="keyword">if</span> (minutes / <span class="number">60</span> &gt; <span class="number">0</span> &amp;&amp; minutes / <span class="number">60</span> / <span class="number">24</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            msg.append(minutes / <span class="number">60</span> + <span class="string">"小时"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minutes / <span class="number">60</span> / <span class="number">24</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            msg.append(minutes / <span class="number">60</span> / <span class="number">24</span> + <span class="string">"天"</span>);</span><br><span class="line">            msg.append(minutes / <span class="number">60</span> % <span class="number">24</span> + <span class="string">"小时"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REG_EXP_DATE = <span class="string">"^((([0-9]&#123;3&#125;[1-9]|[0-9]&#123;2&#125;[1-9][0-9]&#123;1&#125;|[0-9]&#123;1&#125;[1-9][0-9]&#123;2&#125;|[1-9][0-9]&#123;3&#125;)-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]&#123;2&#125;)(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29))\\s+([0-1]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动解析多种格式的时间字符串为时间对象&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 支持格式为：yyyy-MM-dd HH:mm:ss 支持多种分隔符，以及多种日期精度。 如yyyy年MM月。 HH时mm分ss秒</span></span><br><span class="line"><span class="comment">     * 已有更好的替代方案: &#123;<span class="doctag">@link</span> org.hsweb.commons.time.DateFormatter#fromString(String)&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 时间字符串 &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 格式正确则返回对应的java.util.Date对象 格式错误返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">formatUnknownString2Date</span><span class="params">(String dateString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNullOrEmpty(dateString)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dateString = dateString.replace(<span class="string">"T"</span>, <span class="string">" "</span>);</span><br><span class="line">            String hms = <span class="string">"00:00:00"</span>;</span><br><span class="line">            dateString = dateString.trim();</span><br><span class="line">            <span class="keyword">if</span> (dateString.contains(<span class="string">" "</span>)) &#123;</span><br><span class="line">                <span class="comment">// 截取时分秒</span></span><br><span class="line">                hms = dateString.substring(dateString.indexOf(<span class="string">" "</span>) + <span class="number">1</span>, dateString.length());</span><br><span class="line">                <span class="comment">// 重置日期</span></span><br><span class="line">                dateString = dateString.substring(<span class="number">0</span>, dateString.indexOf(<span class="string">" "</span>));</span><br><span class="line">                <span class="comment">// 多中分隔符的支持</span></span><br><span class="line">                hms = hms.replace(<span class="string">"："</span>, <span class="string">":"</span>);</span><br><span class="line">                hms = hms.replace(<span class="string">"时"</span>, <span class="string">":"</span>);</span><br><span class="line">                hms = hms.replace(<span class="string">"分"</span>, <span class="string">":"</span>);</span><br><span class="line">                hms = hms.replace(<span class="string">"秒"</span>, <span class="string">":"</span>);</span><br><span class="line">                hms = hms.replace(<span class="string">"-"</span>, <span class="string">":"</span>);</span><br><span class="line">                hms = hms.replace(<span class="string">"－"</span>, <span class="string">":"</span>);</span><br><span class="line">                <span class="comment">// 时间不同精确度的支持</span></span><br><span class="line">                <span class="keyword">if</span> (hms.endsWith(<span class="string">":"</span>)) &#123;</span><br><span class="line">                    hms = hms.substring(<span class="number">0</span>, hms.length() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (hms.split(<span class="string">":"</span>).length == <span class="number">1</span>) &#123;</span><br><span class="line">                    hms += <span class="string">":00:00"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (hms.split(<span class="string">":"</span>).length == <span class="number">2</span>) &#123;</span><br><span class="line">                    hms += <span class="string">":00"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] hmsarr = hms.split(<span class="string">":"</span>);</span><br><span class="line">            <span class="comment">// 不同日期分隔符的支持</span></span><br><span class="line">            dateString = dateString.replace(<span class="string">"."</span>, <span class="string">"-"</span>);</span><br><span class="line">            dateString = dateString.replace(<span class="string">"/"</span>, <span class="string">"-"</span>);</span><br><span class="line">            dateString = dateString.replace(<span class="string">"－"</span>, <span class="string">"-"</span>);</span><br><span class="line">            dateString = dateString.replace(<span class="string">"年"</span>, <span class="string">"-"</span>);</span><br><span class="line">            dateString = dateString.replace(<span class="string">"月"</span>, <span class="string">"-"</span>);</span><br><span class="line">            dateString = dateString.replace(<span class="string">"日"</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="comment">// 切割年月日</span></span><br><span class="line">            String yearStr, monthStr, dateStr;</span><br><span class="line">            <span class="comment">// 截取日期</span></span><br><span class="line">            String[] ymd = dateString.split(<span class="string">"-"</span>);</span><br><span class="line">            <span class="comment">// 判断日期精确度</span></span><br><span class="line">            yearStr = ymd[<span class="number">0</span>];</span><br><span class="line">            monthStr = ymd.length &gt; <span class="number">1</span> ? ymd[<span class="number">1</span>] : <span class="string">""</span>;</span><br><span class="line">            dateStr = ymd.length &gt; <span class="number">2</span> ? ymd[<span class="number">2</span>] : <span class="string">""</span>;</span><br><span class="line">            monthStr = monthStr == <span class="string">""</span> ? Integer.toString(<span class="number">1</span>) : monthStr;</span><br><span class="line">            dateStr = dateStr == <span class="string">""</span> ? Integer.toString(<span class="number">1</span>) : dateStr;</span><br><span class="line"></span><br><span class="line">            String dtr = (yearStr + <span class="string">"-"</span> + formatDateSplit(monthStr) + <span class="string">"-"</span> + formatDateSplit(dateStr) + <span class="string">" "</span> + hms);</span><br><span class="line">            <span class="keyword">if</span> (!dtr.matches(REG_EXP_DATE))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 返回日期</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DateTime(Integer.parseInt(yearStr.trim()), Integer.parseInt(monthStr.trim()), Integer.parseInt(dateStr.trim()), Integer.parseInt(hmsarr[<span class="number">0</span>].trim()), Integer.parseInt(hmsarr[<span class="number">1</span>].trim()), Integer.parseInt(hmsarr[<span class="number">2</span>].trim()), <span class="number">0</span>).toDate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">formatDateSplit</span><span class="params">(String md)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isInt(md)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.toInt(md) &lt; <span class="number">10</span>) <span class="keyword">return</span> <span class="string">"0"</span>.concat(String.valueOf(StringUtils.toInt(md)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> md;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析多个时间，指定时间之间的分隔符和时间的格式符 分隔符不能与格式符相同</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateString 传入一个时间段字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> spaceChar  指定格式符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> splitChar  指定分隔符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 格式正确返回分割后的时间对象数组 格式错误返回null &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 指定了格式符为. 分隔符为- 返回值为 时间长度为2的Date类型数组&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 时间转换的方式详见 &#123;<span class="doctag">@link</span> DateTimeUtils#formatUnknownString2Date(String dateString)&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date[] formatDatesByString(String dateString, String spaceChar, String splitChar) &#123;</span><br><span class="line">        <span class="keyword">if</span> (spaceChar.equals(splitChar)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] dateStrs = dateString.split(splitChar);</span><br><span class="line">        Date[] dates = <span class="keyword">new</span> Date[dateStrs.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = dateStrs.length; i &lt; size; i++) &#123;</span><br><span class="line">            dates[i] = formatUnknownString2Date(dateStrs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份证号转生日</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> identityCard 身份证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">identityCard2Date</span><span class="params">(String identityCard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String dateStr;</span><br><span class="line">            <span class="keyword">if</span> (identityCard.length() == <span class="number">18</span>) &#123;</span><br><span class="line">                dateStr = identityCard.substring(<span class="number">6</span>, <span class="number">14</span>);<span class="comment">// 截取18位身份证身份证中生日部分</span></span><br><span class="line">                <span class="keyword">return</span> formatDateString(dateStr, <span class="string">"yyyyMMdd"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (identityCard.length() == <span class="number">15</span>) &#123;</span><br><span class="line">                dateStr = identityCard.substring(<span class="number">6</span>, <span class="number">12</span>);<span class="comment">// 截取15位身份证中生日部分</span></span><br><span class="line">                <span class="keyword">return</span> formatDateString(dateStr, <span class="string">"yyMMdd"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validDate</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date = formatUnknownString2Date(str);</span><br><span class="line">            <span class="keyword">return</span> date != <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="org-hsweb-commons-time-DateFormatter"><a href="#org-hsweb-commons-time-DateFormatter" class="headerlink" title="org.hsweb.commons.time.DateFormatter"></a>org.hsweb.commons.time.DateFormatter</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.hsweb.commons.time;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式化工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhouhao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DateFormatter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    List&lt;DateFormatter&gt; supportFormatter = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *常见格式</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="comment">// yyyyMMdd</span></span><br><span class="line">            <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;[0-9]&#123;2&#125;[0-9]&#123;2&#125;"</span>), <span class="string">"yyyyMMdd"</span>)</span><br><span class="line">            <span class="comment">// yyyy-MM-dd</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;"</span>), <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">            <span class="comment">// yyyy/MM/dd</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;/[0-9]&#123;2&#125;/[0-9]&#123;2&#125;"</span>), <span class="string">"yyyy/MM/dd"</span>)</span><br><span class="line">            <span class="comment">//yyyy年MM月dd日</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日"</span>), <span class="string">"yyyy年MM月dd日"</span>)</span><br><span class="line">            <span class="comment">//yyyy年M月d日</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;年[0-9]月[0-9]日"</span>), <span class="string">"yyyy年M月d日"</span>)</span><br><span class="line">            <span class="comment">//yyyy年MM月d日</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;年[0-9]&#123;2&#125;月[0-9]日"</span>), <span class="string">"yyyy年MM月d日"</span>)</span><br><span class="line">            <span class="comment">//yyyy年M月dd日</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;年[0-9]月[0-9]&#123;2&#125;日"</span>), <span class="string">"yyyy年M月dd日"</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// yyyy-M-d</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;-[0-9]-[0-9]"</span>), <span class="string">"yyyy-M-d"</span>)</span><br><span class="line">            <span class="comment">// yyyy-MM-d</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]"</span>), <span class="string">"yyyy-MM-d"</span>)</span><br><span class="line">            <span class="comment">// yyyy-M-dd</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;-[0-9]-[0-9]&#123;2&#125;"</span>), <span class="string">"yyyy-M-dd"</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// yyyy/M/d</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;/[0-9]/[0-9]"</span>), <span class="string">"yyyy/M/d"</span>)</span><br><span class="line">            <span class="comment">// yyyy/MM/d</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;/[0-9]&#123;2&#125;/[0-9]"</span>), <span class="string">"yyyy/MM/d"</span>)</span><br><span class="line">            <span class="comment">// yyyy/M/dd</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;/[0-9]/[0-9]&#123;2&#125;"</span>), <span class="string">"yyyy/M/dd"</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125; [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;"</span>), <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// yyyy/MM/dd HH:mm:ss</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;/[0-9]&#123;2&#125;/[0-9]&#123;2&#125; [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;"</span>), <span class="string">"yyyy/MM/dd HH:mm:ss"</span>)</span><br><span class="line">            <span class="comment">// yyyy-MM-dd HH:mm:ssZ</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125; [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;\\+[0-9]&#123;4&#125;"</span>), <span class="string">"yyyy-MM-dd HH:mm:ssZ"</span>)</span><br><span class="line">            <span class="comment">//yyyy-MM-dd'T'HH:mm:ss</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;T[0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;"</span>), <span class="string">"yyyy-MM-dd'T'HH:mm:ss"</span>)</span><br><span class="line">            <span class="comment">//yyyy-MM-dd'T'HH:mm:ssZ</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;T[0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;\\+[0-9]&#123;4&#125;"</span>), <span class="string">"yyyy-MM-dd'T'HH:mm:ssZ"</span>)</span><br><span class="line">            <span class="comment">//yyyy年MM月dd日HH时mm分ss秒</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日[0-9]&#123;2&#125;时[0-9]&#123;2&#125;分[0-9]&#123;2&#125;秒"</span>), <span class="string">"yyyy年MM月dd日HH时mm分ss秒"</span>)</span><br><span class="line">            <span class="comment">//yyyy年MM月dd日 HH时mm分ss秒</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;年[0-9]&#123;2&#125;月[0-9]&#123;2&#125;日 [0-9]&#123;2&#125;时[0-9]&#123;2&#125;分[0-9]&#123;2&#125;秒"</span>), <span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>)</span><br><span class="line">            <span class="comment">// HH:mm:ss</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;"</span>), <span class="string">"HH:mm:ss"</span>)</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 奇奇怪怪的格式</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="comment">// yyyyMMdd HH:mm:dd</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;[0-9]&#123;2&#125;[0-9]&#123;2&#125; [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;"</span>), <span class="string">"yyyyMMdd HH:mm:ss"</span>)</span><br><span class="line">            <span class="comment">// yyyyMMddHHmmdd</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;[0-9]&#123;2&#125;[0-9]&#123;2&#125;[0-9]&#123;2&#125;[0-9]&#123;2&#125;[0-9]&#123;2&#125;"</span>), <span class="string">"yyyyMMddHHmmdd"</span>)</span><br><span class="line">            <span class="comment">// yyyyMMdd HHmmdd</span></span><br><span class="line">            , <span class="keyword">new</span> DefaultDateFormatter(Pattern.compile(<span class="string">"[0-9]&#123;4&#125;[0-9]&#123;2&#125;[0-9]&#123;2&#125; [0-9]&#123;2&#125;[0-9]&#123;2&#125;[0-9]&#123;2&#125;"</span>), <span class="string">"yyyyMMdd HHmmdd"</span>)</span><br><span class="line">            <span class="comment">//yyyy年 MM月 dd日 EEE HH:mm:ss 'CST'</span></span><br><span class="line">            , <span class="keyword">new</span> SampleJDKDateFormatter(str -&gt; str.contains(<span class="string">"年"</span>) &amp;&amp; str.contains(<span class="string">"CST"</span>) &amp;&amp; str.split(<span class="string">"[ ]"</span>).length == <span class="number">6</span>, () -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年 MM月 dd日 EEE HH:mm:ss 'CST'"</span>, Locale.CHINESE))</span><br><span class="line">            <span class="comment">//yyyy年 MM月 dd日 EEE HH:mm:ss 'GMT'</span></span><br><span class="line">            , <span class="keyword">new</span> SampleJDKDateFormatter(str -&gt; str.contains(<span class="string">"年"</span>) &amp;&amp; str.contains(<span class="string">"GMT"</span>) &amp;&amp; str.split(<span class="string">"[ ]"</span>).length == <span class="number">6</span>, () -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年 MM月 dd日 EEE HH:mm:ss 'GMT'"</span>, Locale.CHINESE))</span><br><span class="line">            <span class="comment">//EEE MMM ddHH:mm:ss 'CST' yyyy</span></span><br><span class="line">            , <span class="keyword">new</span> SampleJDKDateFormatter(str -&gt; str.contains(<span class="string">"CST"</span>) &amp;&amp; str.split(<span class="string">"[ ]"</span>).length == <span class="number">6</span>, () -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">"EEE MMM dd HH:mm:ss 'CST' yyyy"</span>, Locale.US))</span><br><span class="line">            <span class="comment">//EEE MMM ddHH:mm:ss 'GMT' yyyy</span></span><br><span class="line">            , <span class="keyword">new</span> SampleJDKDateFormatter(str -&gt; str.contains(<span class="string">"GMT"</span>) &amp;&amp; str.split(<span class="string">"[ ]"</span>).length == <span class="number">6</span>, () -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">"EEE MMM dd HH:mm:ss 'GMT' yyyy"</span>, Locale.US))</span><br><span class="line">            <span class="comment">//MMM d, yyyy K:m:s a</span></span><br><span class="line">            , <span class="keyword">new</span> SampleJDKDateFormatter(str -&gt; str.endsWith(<span class="string">"AM"</span>) || str.endsWith(<span class="string">"PM"</span>) &amp;&amp; str.split(<span class="string">"[ ]"</span>).length == <span class="number">5</span>, () -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">"MMM d, yyyy K:m:s a"</span>, Locale.ENGLISH))</span><br><span class="line">    ));</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">support</span><span class="params">(String str)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function">Date <span class="title">format</span><span class="params">(String str)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function">String <span class="title">toString</span><span class="params">(Date date)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function">String <span class="title">getPattern</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> Date <span class="title">fromString</span><span class="params">(String dateString)</span> </span>&#123;</span><br><span class="line">        DateFormatter formatter = getFormatter(dateString);</span><br><span class="line">        <span class="keyword">if</span> (formatter != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> formatter.format(dateString);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> Date <span class="title">fromString</span><span class="params">(String dateString, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(pattern).parse(dateString);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">toString</span><span class="params">(Date date, String format)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == date) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (DateFormatter formatter : supportFormatter) &#123;</span><br><span class="line">            <span class="keyword">if</span> (formatter.getPattern().equals(format))</span><br><span class="line">                <span class="keyword">return</span> formatter.toString(date);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DateTime(date).toString(format);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSupport</span><span class="params">(String dateString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !(dateString == <span class="keyword">null</span> || dateString.length() &lt; <span class="number">4</span>) &amp;&amp; supportFormatter.parallelStream().anyMatch(formatter -&gt; formatter.support(dateString));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> DateFormatter <span class="title">getFormatter</span><span class="params">(String dateString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dateString == <span class="keyword">null</span> || dateString.length() &lt; <span class="number">4</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (DateFormatter formatter : supportFormatter) &#123;</span><br><span class="line">            <span class="keyword">if</span> (formatter.support(dateString))</span><br><span class="line">                <span class="keyword">return</span> formatter;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间处理工具类&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java字节指令集</title>
    <link href="https://shiyuquan.github.io/2019/01/17/java%E5%AD%97%E8%8A%82%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <id>https://shiyuquan.github.io/2019/01/17/java字节指令集/</id>
    <published>2019-01-17T03:02:03.000Z</published>
    <updated>2019-01-23T02:14:17.587Z</updated>
    
    <content type="html"><![CDATA[<p>java字节指令集<br><a id="more"></a></p><h1 id="常量入栈指令"><a href="#常量入栈指令" class="headerlink" title="常量入栈指令"></a>常量入栈指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x01</td><td>aconst_null</td><td></td><td>null值入栈。</td></tr><tr><td>0x02</td><td>iconst_m1</td><td></td><td>-1(int)值入栈。</td></tr><tr><td>0x03</td><td>iconst_0</td><td></td><td>0(int)值入栈。</td></tr><tr><td>0x04</td><td>iconst_1</td><td></td><td>1(int)值入栈。</td></tr><tr><td>0x05</td><td>iconst_2</td><td></td><td>2(int)值入栈。</td></tr><tr><td>0x06</td><td>iconst_3</td><td></td><td>3(int)值入栈。</td></tr><tr><td>0x07</td><td>iconst_4</td><td></td><td>4(int)值入栈。</td></tr><tr><td>0x08</td><td>iconst_5</td><td></td><td>5(int)值入栈。</td></tr><tr><td>0x09</td><td>lconst_0</td><td></td><td>0(long)值入栈。</td></tr><tr><td>0x0a</td><td>lconst_1</td><td></td><td>1(long)值入栈。</td></tr><tr><td>0x0b</td><td>fconst_0</td><td></td><td>0(float)值入栈。</td></tr><tr><td>0x0c</td><td>fconst_1</td><td></td><td>1(float)值入栈。</td></tr><tr><td>0x0d</td><td>fconst_2</td><td></td><td>2(float)值入栈。</td></tr><tr><td>0x0e</td><td>dconst_0</td><td></td><td>0(double)值入栈。</td></tr><tr><td>0x0f</td><td>dconst_1</td><td></td><td>1(double)值入栈。</td></tr><tr><td>0x10</td><td>bipush</td><td>valuebyte</td><td>valuebyte值带符号扩展成int值入栈。</td></tr><tr><td>0x11</td><td>sipush</td><td>valuebyte1<br>valuebyte2</td><td>(valuebyte1 &lt;&lt; 8) \</td><td>valuebyte2 值带符号扩展成int值入栈。</td></tr><tr><td>0x12</td><td>ldc</td><td>indexbyte1</td><td>常量池中的常量值（int, float, string reference, object reference）入栈。</td></tr><tr><td>0x13</td><td>ldc_w</td><td>indexbyte1<br>indexbyte2</td><td>常量池中常量（int, float, string   reference, object reference）入栈。</td></tr><tr><td>0x14</td><td>ldc2_w</td><td>indexbyte1<br>indexbyte2</td><td>常量池中常量（long, double）入栈。</td></tr></tbody></table><h1 id="局部变量值转载到栈中指令"><a href="#局部变量值转载到栈中指令" class="headerlink" title="局部变量值转载到栈中指令"></a>局部变量值转载到栈中指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x19</td><td>(wide)aload</td><td>indexbyte</td><td>从局部变量indexbyte中装载引用类型值入栈。</td></tr><tr><td>0x2a</td><td>aload_0</td><td></td><td>从局部变量0中装载引用类型值入栈。</td></tr><tr><td>0x2b</td><td>aload_1</td><td></td><td>从局部变量1中装载引用类型值入栈。</td></tr><tr><td>0x2c</td><td>aload_2</td><td></td><td>从局部变量2中装载引用类型值入栈。</td></tr><tr><td>0x2d</td><td>aload_3</td><td></td><td>从局部变量3中装载引用类型值入栈。</td></tr><tr><td>0x15</td><td>(wide)iload</td><td>indexbyte</td><td>从局部变量indexbyte中装载int类型值入栈。</td></tr><tr><td>0x1a</td><td>iload_0</td><td></td><td>从局部变量0中装载int类型值入栈。</td></tr><tr><td>0x1b</td><td>iload_1</td><td></td><td>从局部变量1中装载int类型值入栈。</td></tr><tr><td>0x1c</td><td>iload_2</td><td></td><td>从局部变量2中装载int类型值入栈。</td></tr><tr><td>0x1d</td><td>iload_3</td><td></td><td>从局部变量3中装载int类型值入栈。</td></tr><tr><td>0x16</td><td>(wide)lload</td><td>indexbyte</td><td>从局部变量indexbyte中装载long类型值入栈。</td></tr><tr><td>0x1e</td><td>lload_0</td><td></td><td>从局部变量0中装载int类型值入栈。</td></tr><tr><td>0x1f</td><td>lload_1</td><td></td><td>从局部变量1中装载int类型值入栈。</td></tr><tr><td>0x20</td><td>lload_2</td><td></td><td>从局部变量2中装载int类型值入栈。</td></tr><tr><td>0x21</td><td>lload_3</td><td></td><td>从局部变量3中装载int类型值入栈。</td></tr><tr><td>0x17</td><td>(wide)fload</td><td>indexbyte</td><td>从局部变量indexbyte中装载float类型值入栈。</td></tr><tr><td>0x22</td><td>fload_0</td><td></td><td>从局部变量0中装载float类型值入栈。</td></tr><tr><td>0x23</td><td>fload_1</td><td></td><td>从局部变量1中装载float类型值入栈。</td></tr><tr><td>0x24</td><td>fload_2</td><td></td><td>从局部变量2中装载float类型值入栈。</td></tr><tr><td>0x25</td><td>fload_3</td><td></td><td>从局部变量3中装载float类型值入栈。</td></tr><tr><td>0x18</td><td>(wide)dload</td><td>indexbyte</td><td>从局部变量indexbyte中装载double类型值入栈。</td></tr><tr><td>0x26</td><td>dload_0</td><td></td><td>从局部变量0中装载double类型值入栈。</td></tr><tr><td>0x27</td><td>dload_1</td><td></td><td>从局部变量1中装载double类型值入栈。</td></tr><tr><td>0x28</td><td>dload_2</td><td></td><td>从局部变量2中装载double类型值入栈。</td></tr><tr><td>0x29</td><td>dload_3</td><td></td><td>从局部变量3中装载double类型值入栈。</td></tr><tr><td>0x32</td><td>aaload</td><td></td><td>从引用类型数组中装载指定项的值。</td></tr><tr><td>0x2e</td><td>iaload</td><td></td><td>从int类型数组中装载指定项的值。</td></tr><tr><td>0x2f</td><td>laload</td><td></td><td>从long类型数组中装载指定项的值。</td></tr><tr><td>0x30</td><td>faload</td><td></td><td>从float类型数组中装载指定项的值。</td></tr><tr><td>0x31</td><td>daload</td><td></td><td>从double类型数组中装载指定项的值。</td></tr><tr><td>0x33</td><td>baload</td><td></td><td>从boolean类型数组或byte类型数组中装载指定项的值（先转换为int类型值，后压栈）。</td></tr><tr><td>0x34</td><td>caload</td><td></td><td>从char类型数组中装载指定项的值（先转换为int类型值，后压栈）。</td></tr><tr><td>0x35</td><td>saload</td><td></td><td>从short类型数组中装载指定项的值（先转换为int类型值，后压栈）。</td></tr></tbody></table><h1 id="将栈顶值保存到局部变量中指令"><a href="#将栈顶值保存到局部变量中指令" class="headerlink" title="将栈顶值保存到局部变量中指令"></a>将栈顶值保存到局部变量中指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x3a</td><td>(wide)astore</td><td>indexbyte</td><td>将栈顶引用类型值保存到局部变量indexbyte中。</td></tr><tr><td>0x4b</td><td>astroe_0</td><td></td><td>将栈顶引用类型值保存到局部变量0中。</td></tr><tr><td>0x4c</td><td>astore_1</td><td></td><td>将栈顶引用类型值保存到局部变量1中。</td></tr><tr><td>0x4d</td><td>astore_2</td><td></td><td>将栈顶引用类型值保存到局部变量2中。</td></tr><tr><td>0x4e</td><td>astore_3</td><td></td><td>将栈顶引用类型值保存到局部变量3中。</td></tr><tr><td>0x36</td><td>(wide)istore</td><td>indexbyte</td><td>将栈顶int类型值保存到局部变量indexbyte中。</td></tr><tr><td>0x3b</td><td>istore_0</td><td></td><td>将栈顶int类型值保存到局部变量0中。</td></tr><tr><td>0x3c</td><td>istore_1</td><td></td><td>将栈顶int类型值保存到局部变量1中。</td></tr><tr><td>0x3d</td><td>istore_2</td><td></td><td>将栈顶int类型值保存到局部变量2中。</td></tr><tr><td>0x3e</td><td>istore_3</td><td></td><td>将栈顶int类型值保存到局部变量3中。</td></tr><tr><td>0x37</td><td>(wide)lstore</td><td>indexbyte</td><td>将栈顶long类型值保存到局部变量indexbyte中。</td></tr><tr><td>0x3f</td><td>lstore_0</td><td></td><td>将栈顶long类型值保存到局部变量0中。</td></tr><tr><td>0x40</td><td>lstore_1</td><td></td><td>将栈顶long类型值保存到局部变量1中。</td></tr><tr><td>0x41</td><td>lstore_2</td><td></td><td>将栈顶long类型值保存到局部变量2中。</td></tr><tr><td>0x42</td><td>lstroe_3</td><td></td><td>将栈顶long类型值保存到局部变量3中。</td></tr><tr><td>0x38</td><td>(wide)fstore</td><td>indexbyte</td><td>将栈顶float类型值保存到局部变量indexbyte中。</td></tr><tr><td>0x43</td><td>fstore_0</td><td></td><td>将栈顶float类型值保存到局部变量0中。</td></tr><tr><td>0x44</td><td>fstore_1</td><td></td><td>将栈顶float类型值保存到局部变量1中。</td></tr><tr><td>0x45</td><td>fstore_2</td><td></td><td>将栈顶float类型值保存到局部变量2中。</td></tr><tr><td>0x46</td><td>fstore_3</td><td></td><td>将栈顶float类型值保存到局部变量3中。</td></tr><tr><td>0x39</td><td>(wide)dstore</td><td>indexbyte</td><td>将栈顶double类型值保存到局部变量indexbyte中。</td></tr><tr><td>0x47</td><td>dstore_0</td><td></td><td>将栈顶double类型值保存到局部变量0中。</td></tr><tr><td>0x48</td><td>dstore_1</td><td></td><td>将栈顶double类型值保存到局部变量1中。</td></tr><tr><td>0x49</td><td>dstore_2</td><td></td><td>将栈顶double类型值保存到局部变量2中。</td></tr><tr><td>0x4a</td><td>dstore_3</td><td></td><td>将栈顶double类型值保存到局部变量3中。</td></tr><tr><td>0x53</td><td>aastore</td><td></td><td>将栈顶引用类型值保存到指定引用类型数组的指定项。</td></tr><tr><td>0x4f</td><td>iastore</td><td></td><td>将栈顶int类型值保存到指定int类型数组的指定项。</td></tr><tr><td>0x50</td><td>lastore</td><td></td><td>将栈顶long类型值保存到指定long类型数组的指定项。</td></tr><tr><td>0x51</td><td>fastore</td><td></td><td>将栈顶float类型值保存到指定float类型数组的指定项。</td></tr><tr><td>0x52</td><td>dastore</td><td></td><td>将栈顶double类型值保存到指定double类型数组的指定项。</td></tr><tr><td>0x54</td><td>bastroe</td><td></td><td>将栈顶boolean类型值或byte类型值保存到指定boolean类型数组或byte类型数组的指定项。</td></tr><tr><td>0x55</td><td>castore</td><td></td><td>将栈顶char类型值保存到指定char类型数组的指定项。</td></tr><tr><td>0x56</td><td>sastore</td><td></td><td>将栈顶short类型值保存到指定short类型数组的指定项。</td></tr></tbody></table><h1 id="wide指令"><a href="#wide指令" class="headerlink" title="wide指令"></a>wide指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xc4</td><td>wide</td><td></td><td>使用附加字节扩展局部变量索引（iinc指令特殊）。</td></tr></tbody></table><h1 id="通用（无类型）栈操作指令"><a href="#通用（无类型）栈操作指令" class="headerlink" title="通用（无类型）栈操作指令"></a>通用（无类型）栈操作指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x00</td><td>nop</td><td></td><td>空操作。</td></tr><tr><td>0x57</td><td>pop</td><td></td><td>从栈顶弹出一个字长的数据。</td></tr><tr><td>0x58</td><td>pop2</td><td></td><td>从栈顶弹出两个字长的数据。</td></tr><tr><td>0x59</td><td>dup</td><td></td><td>复制栈顶一个字长的数据，将复制后的数据压栈。</td></tr><tr><td>0x5a</td><td>dup_x1</td><td></td><td>复制栈顶一个字长的数据，弹出栈顶两个字长数据，先将复制后的数据压栈，再将弹出的两个字长数据压栈。</td></tr><tr><td>0x5b</td><td>dup_x2</td><td></td><td>复制栈顶一个字长的数据，弹出栈顶三个字长的数据，将复制后的数据压栈，再将弹出的三个字长的数据压栈。</td></tr><tr><td>0x5c</td><td>dup2</td><td></td><td>复制栈顶两个字长的数据，将复制后的两个字长的数据压栈。</td></tr><tr><td>0x5d</td><td>dup2_x1</td><td></td><td>复制栈顶两个字长的数据，弹出栈顶三个字长的数据，将复制后的两个字长的数据压栈，再将弹出的三个字长的数据压栈。</td></tr><tr><td>0x5e</td><td>dup2_x2</td><td></td><td>复制栈顶两个字长的数据，弹出栈顶四个字长的数据，将复制后的两个字长的数据压栈，再将弹出的四个字长的数据压栈。</td></tr><tr><td>0x5f</td><td>swap</td><td></td><td><a href="http://lib.csdn.net/base/javaee" target="_blank" rel="noopener">交换栈顶两个字长的数据的位置。Java指令中没有提供以两个字长为单位的交换指令。</a></td></tr></tbody></table><h1 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x86</td><td>i2f</td><td></td><td>将栈顶int类型值转换为float类型值。</td></tr><tr><td>0x85</td><td>i2l</td><td></td><td>将栈顶int类型值转换为long类型值。</td></tr><tr><td>0x87</td><td>i2d</td><td></td><td>将栈顶int类型值转换为double类型值。</td></tr><tr><td>0x8b</td><td>f2i</td><td></td><td>将栈顶float类型值转换为int类型值。</td></tr><tr><td>0x8c</td><td>f2l</td><td></td><td>将栈顶float类型值转换为long类型值。</td></tr><tr><td>0x8d</td><td>f2d</td><td></td><td>将栈顶float类型值转换为double类型值。</td></tr><tr><td>0x88</td><td>l2i</td><td></td><td>将栈顶long类型值转换为int类型值。</td></tr><tr><td>0x89</td><td>l2f</td><td></td><td>将栈顶long类型值转换为float类型值。</td></tr><tr><td>0x8a</td><td>l2d</td><td></td><td>将栈顶long类型值转换double类型值。</td></tr><tr><td>0x8e</td><td>d2i</td><td></td><td>将栈顶double类型值转换为int类型值。</td></tr><tr><td>0x90</td><td>d2f</td><td></td><td>将栈顶double类型值转换为float类型值。</td></tr><tr><td>0x8f</td><td>d2l</td><td></td><td>将栈顶double类型值转换为long类型值。</td></tr><tr><td>0x91</td><td>i2b</td><td></td><td>将栈顶int类型值截断成byte类型，后带符号扩展成int类型值入栈。</td></tr><tr><td>0x92</td><td>i2c</td><td></td><td>将栈顶int类型值截断成char类型值，后带符号扩展成int类型值入栈。</td></tr><tr><td>0x93</td><td>i2s</td><td></td><td>将栈顶int类型值截断成short类型值，后带符号扩展成int类型值入栈。</td></tr></tbody></table><h1 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x60</td><td>iadd</td><td></td><td>将栈顶两int类型数相加，结果入栈。</td></tr><tr><td>0x64</td><td>isub</td><td></td><td>将栈顶两int类型数相减，结果入栈。</td></tr><tr><td>0x68</td><td>imul</td><td></td><td>将栈顶两int类型数相乘，结果入栈。</td></tr><tr><td>0x6c</td><td>idiv</td><td></td><td>将栈顶两int类型数相除，结果入栈。</td></tr><tr><td>0x70</td><td>irem</td><td></td><td>将栈顶两int类型数取模，结果入栈。</td></tr><tr><td>0x74</td><td>ineg</td><td></td><td>将栈顶int类型值取负，结果入栈。</td></tr><tr><td>0x61</td><td>ladd</td><td></td><td>将栈顶两long类型数相加，结果入栈。</td></tr><tr><td>0x65</td><td>lsub</td><td></td><td>将栈顶两long类型数相减，结果入栈。</td></tr><tr><td>0x69</td><td>lmul</td><td></td><td>将栈顶两long类型数相乘，结果入栈。</td></tr><tr><td>0x6d</td><td>ldiv</td><td></td><td>将栈顶两long类型数相除，结果入栈。</td></tr><tr><td>0x71</td><td>lrem</td><td></td><td>将栈顶两long类型数取模，结果入栈。</td></tr><tr><td>0x75</td><td>lneg</td><td></td><td>将栈顶long类型值取负，结果入栈。</td></tr><tr><td>0x84</td><td>(wide)iinc</td><td>indexbyte<br>constbyte</td><td>将整数值constbyte加到indexbyte指定的int类型的局部变量中。</td></tr></tbody></table><h1 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x62</td><td>fadd</td><td></td><td>将栈顶两float类型数相加，结果入栈。</td></tr><tr><td>0x66</td><td>fsub</td><td></td><td>将栈顶两float类型数相减，结果入栈。</td></tr><tr><td>0x6a</td><td>fmul</td><td></td><td>将栈顶两float类型数相乘，结果入栈。</td></tr><tr><td>0x6e</td><td>fdiv</td><td></td><td>将栈顶两float类型数相除，结果入栈。</td></tr><tr><td>0x72</td><td>frem</td><td></td><td>将栈顶两float类型数取模，结果入栈。</td></tr><tr><td>0x76</td><td>fneg</td><td></td><td>将栈顶float类型值取反，结果入栈。</td></tr><tr><td>0x63</td><td>dadd</td><td></td><td>将栈顶两double类型数相加，结果入栈。</td></tr><tr><td>0x67</td><td>dsub</td><td></td><td>将栈顶两double类型数相减，结果入栈。</td></tr><tr><td>0x6b</td><td>dmul</td><td></td><td>将栈顶两double类型数相乘，结果入栈。</td></tr><tr><td>0x6f</td><td>ddiv</td><td></td><td>将栈顶两double类型数相除，结果入栈。</td></tr><tr><td>0x73</td><td>drem</td><td></td><td>将栈顶两double类型数取模，结果入栈。</td></tr><tr><td>0x77</td><td>dneg</td><td></td><td>将栈顶double类型值取负，结果入栈。</td></tr></tbody></table><h1 id="逻辑运算——移位运算"><a href="#逻辑运算——移位运算" class="headerlink" title="逻辑运算——移位运算"></a>逻辑运算——移位运算</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x78</td><td>ishl</td><td></td><td>左移int类型值。</td></tr><tr><td>0x79</td><td>lshl</td><td></td><td>左移long类型值。</td></tr><tr><td>0x7a</td><td>ishr</td><td></td><td>算术右移int类型值。</td></tr><tr><td>0x7b</td><td>lshr</td><td></td><td>算术右移long类型值。</td></tr><tr><td>0x7c</td><td>iushr</td><td></td><td>逻辑右移int类型值。</td></tr><tr><td>0x7d</td><td>lushr</td><td></td><td>逻辑右移long类型值。</td></tr></tbody></table><h1 id="逻辑运算——按位布尔运算"><a href="#逻辑运算——按位布尔运算" class="headerlink" title="逻辑运算——按位布尔运算"></a>逻辑运算——按位布尔运算</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x73</td><td>iand</td><td></td><td>对int类型按位与运算。</td></tr><tr><td>0x7f</td><td>land</td><td></td><td>对long类型的按位与运算。</td></tr><tr><td>0x80</td><td>ior</td><td></td><td>对int类型的按位或运算。</td></tr><tr><td>0x81</td><td>lor</td><td></td><td>对long类型的按位或运算。</td></tr><tr><td>0x82</td><td>ixor</td><td></td><td>对int类型的按位异或运算。</td></tr><tr><td>0x83</td><td>lxor</td><td></td><td>对long类型的按位异或运算。</td></tr></tbody></table><h1 id="控制流指令——条件跳转指令"><a href="#控制流指令——条件跳转指令" class="headerlink" title="控制流指令——条件跳转指令"></a>控制流指令——条件跳转指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x99</td><td>ifeq</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶int类型值为0则跳转。</td></tr><tr><td>0x9a</td><td>ifne</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶int类型值不为0则跳转。</td></tr><tr><td>0x9b</td><td>iflt</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶int类型值小于0则跳转。</td></tr><tr><td>0x9e</td><td>ifle</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶int类型值小于等于0则跳转。</td></tr><tr><td>0x9d</td><td>ifgt</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶int类型值大于0则跳转。</td></tr><tr><td>0x9c</td><td>ifge</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶int类型值大于等于0则跳转。</td></tr><tr><td>0x9f</td><td>if_icmpeq</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶两int类型值相等则跳转。</td></tr><tr><td>0xa0</td><td>if_icmpne</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶两int类型值不相等则跳转。</td></tr><tr><td>0xa1</td><td>if_icmplt</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶两int类型值前小于后则跳转。</td></tr><tr><td>0xa4</td><td>if_icmple</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶两int类型值前小于等于后则跳转。</td></tr><tr><td>0xa3</td><td>if_icmpgt</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶两int类型值前大于后则跳转。</td></tr><tr><td>0xa2</td><td>if_icmpge</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶两int类型值前大于等于后则跳转。</td></tr><tr><td>0xc6</td><td>ifnull</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶引用值为null则跳转。</td></tr><tr><td>0xc7</td><td>ifnonnull</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶引用值不为null则跳转。</td></tr><tr><td>0xa5</td><td>if_acmpeq</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶两引用类型值相等则跳转。</td></tr><tr><td>0xa6</td><td>if_acmpne</td><td>branchbyte1<br>branchbyte2</td><td>若栈顶两引用类型值不相等则跳转。</td></tr></tbody></table><h1 id="控制流指令——比较指令"><a href="#控制流指令——比较指令" class="headerlink" title="控制流指令——比较指令"></a>控制流指令——比较指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0x94</td><td>lcmp</td><td></td><td>比较栈顶两long类型值，前者大，1入栈；相等，0入栈；后者大，-1入栈。</td></tr><tr><td>0x95</td><td>fcmpl</td><td></td><td>比较栈顶两float类型值，前者大，1入栈；相等，0入栈；后者大，-1入栈；有NaN存在，-1入栈。</td></tr><tr><td>0x96</td><td>fcmpg</td><td></td><td>比较栈顶两float类型值，前者大，1入栈；相等，0入栈；后者大，-1入栈；有NaN存在，-1入栈。</td></tr><tr><td>0x97</td><td>dcmpl</td><td></td><td>比较栈顶两double类型值，前者大，1入栈；相等，0入栈；后者大，-1入栈；有NaN存在，-1入栈。</td></tr><tr><td>0x98</td><td>dcmpg</td><td></td><td>比较栈顶两double类型值，前者大，1入栈；相等，0入栈；后者大，-1入栈；有NaN存在，-1入栈。</td></tr></tbody></table><h1 id="控制流指令——无条件跳转指令"><a href="#控制流指令——无条件跳转指令" class="headerlink" title="控制流指令——无条件跳转指令"></a>控制流指令——无条件跳转指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xa7</td><td>goto</td><td>branchbyte1<br>branchbyte2</td><td>无条件跳转到指定位置。</td></tr><tr><td>0xc8</td><td>goto_w</td><td>branchbyte1<br>branchbyte2<br>branchbyte3<br>branchbyte4</td><td>无条件跳转到指定位置（宽索引）。</td></tr></tbody></table><h1 id="控制流指令——表跳转指令"><a href="#控制流指令——表跳转指令" class="headerlink" title="控制流指令——表跳转指令"></a>控制流指令——表跳转指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xaa</td><td>tableswitch</td><td><0-3bytepad><br>defaultbyte1<br>defaultbyte2<br>defaultbyte3<br>defaultbyte4<br>lowbyte1<br>lowbyte2<br>lowbyte3<br>lowbyte4<br>highbyte1<br>highbyte2<br>highbyte3<br>highbyte4<br>jump   offsets…</0-3bytepad></td><td>通过索引访问跳转表，并跳转。</td></tr><tr><td>0xab</td><td>lookupswitch</td><td><0-3bytepad><br>defaultbyte1<br>defaultbyte2<br>defaultbyte3<br>defaultbyte4<br>npairs1<br>npairs2<br>npairs3<br>npairs4<br>match   offsets</0-3bytepad></td><td>通过键值访问跳转表，并跳转。</td></tr></tbody></table><h1 id="控制流指令——异常和finally"><a href="#控制流指令——异常和finally" class="headerlink" title="控制流指令——异常和finally"></a>控制流指令——异常和finally</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xbf</td><td>athrow</td><td></td><td>抛出异常。</td></tr><tr><td>0xa8</td><td>jsr</td><td>branchbyte1<br>branchbyte2</td><td>跳转到子例程序。</td></tr><tr><td>0xc9</td><td>jsr_w</td><td>branchbyte1<br>branchbyte2<br>branchbyte3<br>branchbyte4</td><td>跳转到子例程序（宽索引）。</td></tr><tr><td>0xa9</td><td>(wide)ret</td><td>indexbyte</td><td>返回子例程序。</td></tr></tbody></table><h1 id="对象操作指令"><a href="#对象操作指令" class="headerlink" title="对象操作指令"></a>对象操作指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xbb</td><td>new</td><td>indexbyte1<br>indexbyte2</td><td>创建新的对象实例。</td></tr><tr><td>0xc0</td><td>checkcast</td><td>indexbyte1<br>indexbyte2</td><td>类型强转。</td></tr><tr><td>0xc1</td><td>instanceof</td><td>indexbyte1<br>indexbyte2</td><td>判断类型。</td></tr><tr><td>0xb4</td><td>getfield</td><td>indexbyte1<br>indexbyte2</td><td>获取对象字段的值。</td></tr><tr><td>0xb5</td><td>putfield</td><td>indexbyte1<br>indexbyte2</td><td>给对象字段赋值。</td></tr><tr><td>0xb2</td><td>getstatic</td><td>indexbyte1<br>indexbyte2</td><td>获取静态字段的值。</td></tr><tr><td>0xb3</td><td>putstatic</td><td>indexbyte1<br>indexbyte2</td><td>给静态字段赋值。</td></tr></tbody></table><h1 id="数组操作指令"><a href="#数组操作指令" class="headerlink" title="数组操作指令"></a>数组操作指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xbc</td><td>newarray</td><td>atype</td><td>创建type类型的数组。</td></tr><tr><td>0xbd</td><td>anewarray</td><td>indexbyte1<br>indexbyte2</td><td>创建引用类型的数组。</td></tr><tr><td>0xbe</td><td>arraylength</td><td></td><td>获取一维数组的长度。</td></tr><tr><td>0xc5</td><td>multianewarray</td><td>indexbyte1<br>indexbyte2<br>dimension</td><td>创建dimension维度的数组。</td></tr></tbody></table><h1 id="方法调用指令"><a href="#方法调用指令" class="headerlink" title="方法调用指令"></a>方法调用指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xb7</td><td>invokespecial</td><td>indexbyte1<br>indexbyte2</td><td>编译时方法绑定调用方法。</td></tr><tr><td>0xb6</td><td>invokevirtual</td><td>indexbyte1<br>indexbyte2</td><td>运行时方法绑定调用方法。</td></tr><tr><td>0xb8</td><td>invokestatic</td><td>indexbyte1<br>indexbyte2</td><td>调用静态方法。</td></tr><tr><td>0xb9</td><td>invokeinterface</td><td>indexbyte1<br>indexbyte2<br>count<br>0</td><td>调用接口方法。</td></tr></tbody></table><h1 id="方法返回指令"><a href="#方法返回指令" class="headerlink" title="方法返回指令"></a>方法返回指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xac</td><td>ireturn</td><td></td><td>返回int类型值。</td></tr><tr><td>0xad</td><td>lreturn</td><td></td><td>返回long类型值。</td></tr><tr><td>0xae</td><td>freturn</td><td></td><td>返回float类型值。</td></tr><tr><td>0xaf</td><td>dreturn</td><td></td><td>返回double类型值。</td></tr><tr><td>0xb0</td><td>areturn</td><td></td><td>返回引用类型值。</td></tr><tr><td>0xb1</td><td>return</td><td></td><td>void函数返回。</td></tr></tbody></table><h1 id="线程同步指令"><a href="#线程同步指令" class="headerlink" title="线程同步指令"></a>线程同步指令</h1><table><thead><tr><th>指令码</th><th>操作码（助记符）</th><th>操作数</th><th>描述（栈指操作数栈）</th></tr></thead><tbody><tr><td>0xc2</td><td>monitorenter</td><td></td><td>进入并获得对象监视器。</td></tr><tr><td>0xc3</td><td>monitorexit</td><td></td><td>释放并退出对象监视器。</td></tr></tbody></table><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java字节指令集&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>前端表格的数据排序，后台留记录实现</title>
    <link href="https://shiyuquan.github.io/2019/01/11/%E5%89%8D%E7%AB%AF%E8%A1%A8%E6%A0%BC%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%90%8E%E5%8F%B0%E7%95%99%E8%AE%B0%E5%BD%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shiyuquan.github.io/2019/01/11/前端表格的数据排序，后台留记录实现/</id>
    <published>2019-01-11T02:09:01.000Z</published>
    <updated>2019-01-11T02:54:47.936Z</updated>
    
    <content type="html"><![CDATA[<p>前端需要自定义排序数据库的数据，在此记录想到的实现方式。<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>排序的页面主要效果有两种，一种是点击按钮，实现上移下移、置顶置底的功能。这类的操作相对简单。二种是直接拖拽表格的数据实现拖拽的排序，个人认为实现上相对难点。考虑的重点在于数据库的效率，按钮式的操作在有排序字段的前提下，可以实现上移下移和置顶置底都只有两条数据的操作，但是按钮的缺乏了自由挑位置插入的功能。手动拖拽的功能可以按自己想法随意排数据，依旧在使用排序字段的方式下，假如现在10条数据可以排，将第九条查到第二条，将会进行8次的数据库操作，并且排序字段越多，数据库操作次数越多。出于效率的考虑，最终选择了建立排序表的方式，替代了排序字段以记录排序的规则。次方法将只操作一次数据库，但相对添加了前后台代码上的效率。</p><h1 id="数据库设置排序字段"><a href="#数据库设置排序字段" class="headerlink" title="数据库设置排序字段"></a>数据库设置排序字段</h1><h2 id="按钮操作"><a href="#按钮操作" class="headerlink" title="按钮操作"></a>按钮操作</h2><p>使用排序字段的方式下，按钮的上移下移置顶置底操作可实现的操作如下</p><blockquote><p>上移下移：这个其实是交换的操作，将需要交换的数据传到后台，后台进行入库。操作数据为两条<br>置顶置底：因为其数据的特殊，可以进行算法来优化。<br>  某数据置顶，则将这个数据与顶数据的排序字段进行减法 sort(顶)-sort(排序)<br>  某数据置底，则将这个数据的模与底数据的排序字段进行加法 |sort(底)|+sort(排序)<br>其操作的数据库也都是两次。</p></blockquote><h2 id="自由拖拽"><a href="#自由拖拽" class="headerlink" title="自由拖拽"></a>自由拖拽</h2><p>自由拖拽的情况下，没想到优化的方法。只能暴力地进行大量的数据操作。</p><h1 id="数据库设置排序表"><a href="#数据库设置排序表" class="headerlink" title="数据库设置排序表"></a>数据库设置排序表</h1><p>在排序表的方式下，我将页面上的排序进行了存储，设置标识字段和排序规则字段，页面将根据标识和规则进行排序。现在的实现为：页面进行本地的排序，然后将排好的顺序根据我们的约定生成相应排序规则，将规则存入数据库。这方法将不对原生的数据库数据进行操作，顺序完全交与排序表，并且每次都只进行一次的数据库交互。对应多出来的操作在每次前端都需要进行数据的遍历，生成排序规则。</p><p>考虑下来，个人认为减轻数据库的负担比较好，所以选用了设置的排序表的方式，并且此方式可作为公共服务供全局使用。</p><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端需要自定义排序数据库的数据，在此记录想到的实现方式。&lt;br&gt;
    
    </summary>
    
    
      <category term="功能实现" scheme="https://shiyuquan.github.io/tags/%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>springboot swagger生成文档</title>
    <link href="https://shiyuquan.github.io/2018/12/19/springboot-swagger%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3/"/>
    <id>https://shiyuquan.github.io/2018/12/19/springboot-swagger生成文档/</id>
    <published>2018-12-19T07:06:45.000Z</published>
    <updated>2018-12-20T05:38:07.166Z</updated>
    
    <content type="html"><![CDATA[<p>工作上前后台分离，有时候接口定义没定好导致开发阶段要修改接口，前台要接口每次都来问，想要及时改好的接口文档。两边都挺麻烦的。我项目里面使用了swagger有页面的文档，能不能生成静态文件呢？结果还真的可以，美滋滋<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此处从springboot引用swagger到导出一次讲解，搭建过程可能会遇见很多问题，还请根据实际情况搜索。</p><p>参考</p><p><a href="https://swagger.io/" target="_blank" rel="noopener">swagger官网</a></p><p><a href="https://github.com/Swagger2Markup/swagger2markup" target="_blank" rel="noopener">swagger2markup</a></p><h1 id="引用pom-xml"><a href="#引用pom-xml" class="headerlink" title="引用pom.xml"></a>引用pom.xml</h1><p>这里需要注意一点，我现在提供的pom是可以的，如果直接使用最新的swagger包，在使用swagger上没问题，但是后面生成静态文档会有报错<br>错误信息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NoSuchMethodError: io.swagger.models.Response.responseSchema(Lio/swagger/models/Model;)Lio/swagger/models/Response;</span><br></pre></td></tr></table></figure></p><p>意思就是方法没有，解决方法参考<a href="https://blog.csdn.net/qq_34727675/article/details/82961995" target="_blank" rel="noopener">这篇博客</a>。基本上的意思就是jar包版本的问题，依赖的某些包没有维护了导致的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--swagger2--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.github.swagger2markup&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;swagger2markup&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;swagger-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;swagger-models&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="编写SwaggerConfig-java"><a href="#编写SwaggerConfig-java" class="headerlink" title="编写SwaggerConfig.java"></a>编写SwaggerConfig.java</h1><p>这里直接上我的代码，具体参考官网或者上网搜。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DoucmentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"xxx.xxx.xxx.xxx"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"服务接口API"</span>)</span><br><span class="line">                .description(<span class="string">"服务接口的文档说明"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">""</span>)</span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="controller接口例子"><a href="#controller接口例子" class="headerlink" title="controller接口例子"></a>controller接口例子</h1><p>api注解是swagger的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"测试接口"</span>, tags = &#123; <span class="string">"测试接口"</span> &#125;)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoService</span><span class="params">(DemoService demoService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.demoService = demoService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"测试接口"</span>, notes = <span class="string">"测试接口"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"getTest/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyResult&lt;Demo&gt; <span class="title">getDome</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoService.getDemo(id);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这一步启动项目，没报错的话浏览器输入<code>localhost:8080/swagger-ui.html</code>就可以看到swagger 的页面文档，还可以进行接口测试。</p><h1 id="生成静态文档"><a href="#生成静态文档" class="headerlink" title="生成静态文档"></a>生成静态文档</h1><p>静态文档的生成，写测试用例就行，也不一定是测试用例，如果你愿意再写个main方法或者写在功能代码里的话。</p><p>SwaggerStaticDocTest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = SwaggerTestApplication.class, webEnvironment = RANDOM_PORT)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerStaticDocTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成AsciiDocs格式文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateAsciiDocs</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//    输出Ascii格式</span></span><br><span class="line">        Swagger2MarkupConfig config = <span class="keyword">new</span> Swagger2MarkupConfigBuilder()</span><br><span class="line">                .withMarkupLanguage(MarkupLanguage.ASCIIDOC)</span><br><span class="line">                .withOutputLanguage(Language.ZH)</span><br><span class="line">                .withPathsGroupedBy(GroupBy.TAGS)</span><br><span class="line">                .withGeneratedExamples()</span><br><span class="line">                .withoutInlineSchema()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Swagger2MarkupConverter.from(<span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/v2/api-docs"</span>))</span><br><span class="line">                .withConfig(config)</span><br><span class="line">                .build()</span><br><span class="line">                .toFolder(Paths.get(<span class="string">"./docs/asciidoc/generated"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成Markdown格式文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateMarkdownDocs</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//    输出Markdown格式</span></span><br><span class="line">        Swagger2MarkupConfig config = <span class="keyword">new</span> Swagger2MarkupConfigBuilder()</span><br><span class="line">                .withMarkupLanguage(MarkupLanguage.MARKDOWN)</span><br><span class="line">                .withOutputLanguage(Language.ZH)</span><br><span class="line">                .withPathsGroupedBy(GroupBy.TAGS)</span><br><span class="line">                .withGeneratedExamples()</span><br><span class="line">                .withoutInlineSchema()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Swagger2MarkupConverter.from(<span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/v2/api-docs"</span>))</span><br><span class="line">                .withConfig(config)</span><br><span class="line">                .build()</span><br><span class="line">                .toFolder(Paths.get(<span class="string">"./docs/markdown/generated"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成Confluence格式文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateConfluenceDocs</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//    输出Confluence使用的格式</span></span><br><span class="line">        Swagger2MarkupConfig config = <span class="keyword">new</span> Swagger2MarkupConfigBuilder()</span><br><span class="line">                .withMarkupLanguage(MarkupLanguage.CONFLUENCE_MARKUP)</span><br><span class="line">                .withOutputLanguage(Language.ZH)</span><br><span class="line">                .withPathsGroupedBy(GroupBy.TAGS)</span><br><span class="line">                .withGeneratedExamples()</span><br><span class="line">                .withoutInlineSchema()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Swagger2MarkupConverter.from(<span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/v2/api-docs"</span>))</span><br><span class="line">                .withConfig(config)</span><br><span class="line">                .build()</span><br><span class="line">                .toFolder(Paths.get(<span class="string">"./docs/confluence/generated"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成AsciiDocs格式文档,并汇总成一个文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateAsciiDocsToFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//    输出Ascii到单文件</span></span><br><span class="line">        Swagger2MarkupConfig config = <span class="keyword">new</span> Swagger2MarkupConfigBuilder()</span><br><span class="line">                .withMarkupLanguage(MarkupLanguage.ASCIIDOC)</span><br><span class="line">                .withOutputLanguage(Language.ZH)</span><br><span class="line">                .withPathsGroupedBy(GroupBy.TAGS)</span><br><span class="line">                .withGeneratedExamples()</span><br><span class="line">                .withoutInlineSchema()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Swagger2MarkupConverter.from(<span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/v2/api-docs"</span>))</span><br><span class="line">                .withConfig(config)</span><br><span class="line">                .build()</span><br><span class="line">                .toFile(Paths.get(<span class="string">"./docs/asciidoc/generated/all"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成Markdown格式文档,并汇总成一个文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateMarkdownDocsToFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//    输出Markdown到单文件</span></span><br><span class="line">        Swagger2MarkupConfig config = <span class="keyword">new</span> Swagger2MarkupConfigBuilder()</span><br><span class="line">                .withMarkupLanguage(MarkupLanguage.MARKDOWN)</span><br><span class="line">                .withOutputLanguage(Language.ZH)</span><br><span class="line">                .withPathsGroupedBy(GroupBy.TAGS)</span><br><span class="line">                .withGeneratedExamples()</span><br><span class="line">                .withoutInlineSchema()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Swagger2MarkupConverter.from(<span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/v2/api-docs"</span>))</span><br><span class="line">                .withConfig(config)</span><br><span class="line">                .build()</span><br><span class="line">                .toFile(Paths.get(<span class="string">"./docs/markdown/generated/all"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出json</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSwaggerJson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String outputDir = <span class="string">"./docs"</span>;</span><br><span class="line">        MvcResult mvcResult = <span class="keyword">this</span>.mockMvc.preform(get(<span class="string">"/v2/api-docs"</span>)</span><br><span class="line">                .accept(MediaType.APPLCATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andReturn();</span><br><span class="line">        MockHttpServletResponse response = mvcResult.getResponse();</span><br><span class="line">        String swaggerJson = response.getContentAsString();</span><br><span class="line">        Files.createDirectories(Paths.get(outputDir));</span><br><span class="line">        <span class="keyword">try</span> (BufferedWriter writer = Files.newBufferedWriter(Paths.get(outputDir, <span class="string">"swagger.json"</span>), StandardCharsets.UTF_8)) &#123;</span><br><span class="line">            writer.write(swaggerJson);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码内容很简单，大致说明几个关键内容：</p><p>MarkupLanguage.ASCIIDOC：指定了要输出的最终格式。除了ASCIIDOC之外，还有MARKDOWN和CONFLUENCE_MARKUP</p><p>from(new URL(“<a href="http://localhost:8080/v2/api-docs&quot;)：指定了生成静态部署文档的源头配置，可以是这样的URL形式，也可以是符合Swagger规范的String类型或者从文件中读取的流。如果是对当前使用的Swagger项目，我们通过使用访问本地Swagger接口的方式，如果是从外部获取的Swagger文档配置文件，就可以通过字符串或读文件的方式" target="_blank" rel="noopener">http://localhost:8080/v2/api-docs&quot;)：指定了生成静态部署文档的源头配置，可以是这样的URL形式，也可以是符合Swagger规范的String类型或者从文件中读取的流。如果是对当前使用的Swagger项目，我们通过使用访问本地Swagger接口的方式，如果是从外部获取的Swagger文档配置文件，就可以通过字符串或读文件的方式</a></p><p>toFolder(Paths.get(“src/docs/asciidoc/generated”)：指定最终生成文件的具体目录位置<br>输出到单个文件</p><p>如果不想分割结果文件，也可以通过替换toFolder(Paths.get(“src/docs/asciidoc/generated”)为toFile(Paths.get(“src/docs/asciidoc/generated/all”))，将转换结果输出到一个单一的文件中，这样可以最终生成html的也是单一的。</p><h1 id="末尾"><a href="#末尾" class="headerlink" title="末尾"></a>末尾</h1><p>这里只提供了java代码生成文档，还可以通过maven来生成，没试过，有空试试，好像可以直接生成html和pdf，这点很诱人。</p><h1 id="补充html生成"><a href="#补充html生成" class="headerlink" title="补充html生成"></a>补充html生成</h1><p>html是根据生成的.adoc文件生成的，通过maven插件。<br>pom.xml 添加以下内容，放在plugins标签内<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.asciidoctor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asciidoctro-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>docs/asciidoc/gengerated<span class="tag">&lt;/<span class="name">sourceDir</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>docs/asciidoc/html<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">backend</span>&gt;</span>html<span class="tag">&lt;/<span class="name">backend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceHighlighter</span>&gt;</span>coderay<span class="tag">&lt;/<span class="name">sourceHighLighter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">toc</span>&gt;</span>left<span class="tag">&lt;/<span class="name">toc</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sectnums</span>&gt;</span>true<span class="tag">&lt;/<span class="name">sectnums</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>执行插件就可以生成html到指定的文件夹，idea可以点开maven工具执行<br><img src="/images/swagger.png" alt=""></p><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作上前后台分离，有时候接口定义没定好导致开发阶段要修改接口，前台要接口每次都来问，想要及时改好的接口文档。两边都挺麻烦的。我项目里面使用了swagger有页面的文档，能不能生成静态文件呢？结果还真的可以，美滋滋&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot+pgsql 时间查询遇见的小问题</title>
    <link href="https://shiyuquan.github.io/2018/12/11/springboot-pgsql-%E6%97%B6%E9%97%B4%E6%9F%A5%E8%AF%A2%E9%81%87%E8%A7%81%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://shiyuquan.github.io/2018/12/11/springboot-pgsql-时间查询遇见的小问题/</id>
    <published>2018-12-11T06:39:03.000Z</published>
    <updated>2018-12-11T07:03:44.828Z</updated>
    
    <content type="html"><![CDATA[<p>又是一周没写博客，想起来就写一个刚遇见的小问题吧<br><a id="more"></a></p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>现在的项目是springboot+pgsql。吐槽一下公司数据库字段的做法先。现在数据库所有的字段都是varchar的。而实体类建的全部对应string，可真是天下大一统啊…</p><h1 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h1><p>本想将数据库日期改成时间戳格式，但是成本太高了，就错开一步，将实体类的日期字段改成date了，乍一看没什么问题，但是今天发现了个坑。<br>测试接口的时候，手动建的数据，日期格式上就对应不上了，比如空字符串，乱填等等，查出来对应不上date类型。果然一统天下的权势难以撼动啊。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>将实体类的字段改回了string，然后写了个时间工具类，将date转string。</p><p>一个自己写的坑…</p><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是一周没写博客，想起来就写一个刚遇见的小问题吧&lt;br&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
      <category term="posrtgresql" scheme="https://shiyuquan.github.io/tags/posrtgresql/"/>
    
  </entry>
  
  <entry>
    <title>Mybatas Plus 配置实体类公共字段</title>
    <link href="https://shiyuquan.github.io/2018/12/03/Mybatas-Plus-%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5/"/>
    <id>https://shiyuquan.github.io/2018/12/03/Mybatas-Plus-配置实体类公共字段/</id>
    <published>2018-12-03T07:54:33.000Z</published>
    <updated>2018-12-03T08:36:03.150Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间接的一个项目，建表要求有公共字段，持久层框架使用MP，有提供支持直接使用，操作很简单。<br><a id="more"></a></p><h1 id="MP官网文档"><a href="#MP官网文档" class="headerlink" title="MP官网文档"></a>MP官网文档</h1><p><a href="https://baomidou.gitee.io/mybatis-plus-doc/#/auto-fill" target="_blank" rel="noopener">地址</a></p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="MyMetaObjectHandler-java"><a href="#MyMetaObjectHandler-java" class="headerlink" title="MyMetaObjectHandler.java"></a>MyMetaObjectHandler.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">extends</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试 user 表 name 字段为空自动填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取登录人</span></span><br><span class="line">        User user = UserUtils.getLoginUser();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新增时添加创建人字段</span></span><br><span class="line">        <span class="keyword">if</span> (metaObject.hasGetter(<span class="string">"createName"</span>)) &#123;</span><br><span class="line">            Object createName = metaObject.getValue(<span class="string">"metaObject"</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(createName)) &#123;</span><br><span class="line">                metaObject.setValue(<span class="string">"createName"</span>, user.getUserName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ... ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        Object et = getFileValByName(<span class="string">"et"</span>, metaObject);</span><br><span class="line">        <span class="keyword">if</span> () &#123;</span><br><span class="line">            <span class="keyword">if</span> () &#123;</span><br><span class="line">                User user = UserUtils.getLoginUser();</span><br><span class="line">                 <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">                    user = <span class="keyword">new</span> User();</span><br><span class="line">                &#125;</span><br><span class="line">                PublicEntity publicEntity = (PublicEntity)et;</span><br><span class="line">                publicEntity.setEditName(user.getUserName());</span><br><span class="line">                ... ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PublicEntity-java"><a href="#PublicEntity-java" class="headerlink" title="PublicEntity.java"></a>PublicEntity.java</h2><p>公共字段类，实体类继承他，可以实现公共字段的继承，就可以不用单独写公共字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PublicEntity</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Model</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> String createName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span><br><span class="line">    <span class="keyword">private</span> String editName;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">    ...</span><br><span class="line">    global-config:</span><br><span class="line">        ...</span><br><span class="line">        meta-object-handler: xxx.xxx.xxx.xxx.MyMetaObjectHandler # Handlerd 的相对路径</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间接的一个项目，建表要求有公共字段，持久层框架使用MP，有提供支持直接使用，操作很简单。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
      <category term="mybatis" scheme="https://shiyuquan.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>杂谈-近期回顾</title>
    <link href="https://shiyuquan.github.io/2018/11/24/%E6%9D%82%E8%B0%88-%E8%BF%91%E6%9C%9F%E5%9B%9E%E9%A1%BE/"/>
    <id>https://shiyuquan.github.io/2018/11/24/杂谈-近期回顾/</id>
    <published>2018-11-24T05:59:50.000Z</published>
    <updated>2018-11-24T06:44:03.121Z</updated>
    
    <content type="html"><![CDATA[<p>突然想起来好久没写东西了，近期也没什么特别想写的，就回顾一下前些天的东西吧<br><a id="more"></a></p><p>上次写博客到现在应该是9天了，近一个星期没做出什么特别的事情，记录一下。</p><p>之前在公司接到了一个做报表的活，学习使用帆软来制作报表。也挺久了，一开始都是让我写一些报表，作为一个开发人员我内心真的特别抵触这个事情。报表给文员写不就好了，怎么让我一个开发的写。上级给任务的时候的意思是我前后台都会点，上手这个报表会好做。我信以为真，以为是要用到前后台的知识做一些开发，结果就是使用帆软的工具，可能需要点开发知识而已…心烦意乱，毕竟我当下还是想学东西，做开发的，用帆软写报表的活着实让我心里面不好受。</p><p>这个状态持续了相当一段时间，直到上个星期，得到了需要做一些基于帆软二次开发的需求，才有了点好转。毕竟是做开发了不是，然而报表还是要我写就是了…帆软的二次开发应该是不太难的，但是我从开始找入口到现在还是过去了一个多星期，那么重要的坎在哪里呢？</p><p>第一是帆软他们自己有提供java的二次开发接口，但是！文档基本为零！提供了接口，跟你讲可以做这些事情但是不告诉你怎么做，去哪里做。找他们的二开项目花了我一两天时间，最后找官方的客服，才给了我一个开发者文档，这东西不找他们我都不知道有…论坛官网上面的逛了一遍又一遍都没看到过，真是无语了。</p><p>第二点，在有了开发者文档后，跟着文档去git拉开发项目，基本上就是根着已有的去模仿创新，来写我们自己的插件。思路是有，但是问题来了…文档就给你说了个要做这个就去实现什么借口，然后给你一个借口的名字…就没了。我真的无奈，当下来的包里面的确有他们提供的所有东西，但是我要怎么写啊哥，给点明路好吗。无奈下我就去看他们的源码，就是一大坑，来自于他们的很多代码没有注释，看着看着就不知道那个类那个方法是干嘛的了。瞬间意识到了写注释的重要性，在此之前都是知道，懂。这次是真的亲身经历了。</p><p>千辛万苦下找到了点门路，终于可以有点写地动了。而这个时候都是过去了五六天了…着实无奈。</p><p>中间学着发布了一下，把帆软发布到了自己公司的服务器，容器是docker，发布的过程比我想象的简单很多，我想发布的主要困难可能还是得等以后才能遇见了。</p><p>总结下来，这一周的收获就是让我意识到了产品 、功能的文档的重要性，二个就是开发人写注释的重要性。需要明了地做到让目标作用人员能清晰的读懂你做的事，和他们能做的事，非常重要！<br><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然想起来好久没写东西了，近期也没什么特别想写的，就回顾一下前些天的东西吧&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://shiyuquan.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>springboot long型ID精度丢失问题</title>
    <link href="https://shiyuquan.github.io/2018/11/15/springboot-long%E5%9E%8BID%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>https://shiyuquan.github.io/2018/11/15/springboot-long型ID精度丢失问题/</id>
    <published>2018-11-15T06:49:28.000Z</published>
    <updated>2018-11-15T07:30:59.966Z</updated>
    
    <content type="html"><![CDATA[<p>数据库主键设计为Long，新增查询发现id和数据库不一样，记录了解的信息。<br><a id="more"></a></p><h1 id="问题出现原因"><a href="#问题出现原因" class="headerlink" title="问题出现原因"></a>问题出现原因</h1><p>各语言对long的定义不一样，java的long是2的64次方。而js的number最大为2的54次方-1。所以用json传递的时候就可能会出现数据丢失的问题。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>我采用的解决方法是将数据转json时，将long型转成string，字符串不存在精度的问题。</p><h2 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h2><p>在MvcConfig配置json配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageCoverter&lt;?&gt; converters)</span> </span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter jsonConverter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line"></span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(<span class="keyword">long</span>.class, ToStringSerializer.instance);</span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        jsonConverter.setObjectMapper(objectMapper);</span><br><span class="line">        converters.add(jsonConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="单字段设置"><a href="#单字段设置" class="headerlink" title="单字段设置"></a>单字段设置</h2><p>实体类字段上加如下注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using=ToStringSerializer.class)</span><br></pre></td></tr></table></figure></p><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库主键设计为Long，新增查询发现id和数据库不一样，记录了解的信息。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>java类加载顺序</title>
    <link href="https://shiyuquan.github.io/2018/11/05/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
    <id>https://shiyuquan.github.io/2018/11/05/java类加载顺序/</id>
    <published>2018-11-05T03:06:01.000Z</published>
    <updated>2018-11-05T04:39:21.835Z</updated>
    
    <content type="html"><![CDATA[<p>阅读《java编程思想》看到了java类加载的一点东西，通过查阅资料总结一下我对java类加载顺序的个人理解<br><a id="more"></a></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序:"></a>初始化顺序:</h2><ol><li>为静态变量、方法分配内存并赋值(静态方法后面大括号语句不执行，只初始化),执行静态代码块(立刻执行大括号里面的语句)。静态加载顺序自上而下。</li><li>初始化构造方法(只初始化，等待非静态属性加载)</li><li>为非静态属性分配内存并赋值</li><li>执行构造代码块(构造代码块在每次创建对象的时候都会执行一次)</li><li>执行构造方法</li><li>非静态代码块 或 静态方法(调用才加载)。</li></ol><h2 id="如果有继承关系"><a href="#如果有继承关系" class="headerlink" title="如果有继承关系"></a>如果有继承关系</h2><ol><li>父类静态方法成员变量代码块</li><li>子类静态方法成员变量代码块</li><li>父类构造方法初始化</li><li>子类构造方法初始化</li><li>父类非静态属性分配内存并赋值</li><li>子类非静态属性分配内存并赋值</li><li>执行父类构造代码块</li><li>执行父类构造方法</li><li>执行子类构造代码块</li><li>执行子类构造方法</li></ol><p>接口、内部类等，调用时加载</p><h2 id="main方法怎么执行的呢？"><a href="#main方法怎么执行的呢？" class="headerlink" title="main方法怎么执行的呢？"></a>main方法怎么执行的呢？</h2><p>参考博客(<a href="https://www.cnblogs.com/iceAeterNa/p/4876940.html" target="_blank" rel="noopener">https://www.cnblogs.com/iceAeterNa/p/4876940.html</a>)</p><blockquote><p>java应用程序的启动在在/hotspot/src/share/tools/launcher/java.c的main()函数中，而在虚拟机初始化过程中，将创建并启动Java的Main线程。最后将调用JNIEnv的CallStaticVoidMethod()来执行main方法。<br>CallStaticVoidMethod()对应的jni函数为jni_CallStaticVoidMethod，定义在/hotspot/src/share/vm/prims/jni.cpp中，而jni_CallStaticVoidMethod()又调用了jni_invoke_static()，jni_invoke_static()通过JavaCalls的call()发起对Java方法的调用</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读《java编程思想》看到了java类加载的一点东西，通过查阅资料总结一下我对java类加载顺序的个人理解&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="jvm" scheme="https://shiyuquan.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>学习工作中遇见的异常</title>
    <link href="https://shiyuquan.github.io/2018/11/01/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E8%A7%81%E7%9A%84%E5%BC%82%E5%B8%B8/"/>
    <id>https://shiyuquan.github.io/2018/11/01/学习工作中遇见的异常/</id>
    <published>2018-11-01T01:47:06.000Z</published>
    <updated>2018-11-01T01:49:00.672Z</updated>
    
    <content type="html"><![CDATA[<p>自二〇一八年十一月一日 农历九月廿四 始<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自二〇一八年十一月一日 农历九月廿四 始&lt;br&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://shiyuquan.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>为什么c++比java快</title>
    <link href="https://shiyuquan.github.io/2018/10/23/%E4%B8%BA%E4%BB%80%E4%B9%88c-%E6%AF%94java%E5%BF%AB/"/>
    <id>https://shiyuquan.github.io/2018/10/23/为什么c-比java快/</id>
    <published>2018-10-23T02:49:59.000Z</published>
    <updated>2018-10-23T02:54:12.649Z</updated>
    
    <content type="html"><![CDATA[<p>摘自《Java编程思想》 第五版<br><a id="more"></a></p><p>……<br>最重要的问题之一是对象的创建及破坏方式。对象需要的数据位于哪儿，如何控制对象的“存在时间”呢？针对这个问题，解决的方案是各异其趣的。C++认为程序的执行效率是最重要的一个问题，所以它允许程序员作出选择。为获得最快的运行速度，存储以及存在时间可在编写程序时决定，只需将对象放置在堆栈（有时也叫作自动或定域变量）或者静态存储区域即可。这样便为存储空间的分配和释放提供了一个优先级。某些情况下，这种优先级的控制是非常有价值的。然而，我们同时也牺牲了灵活性，因为在编写程序时，必须知道对象的准确的数量、存在时间、以及类型。如果要解决的是一个较常规的问题，如计算机辅助设计、仓储管理或者空中交通控制，这一方法就显得太局限了。<br>第二个方法是在一个内存池中动态创建对象，该内存池亦叫“堆”或者“内存堆”。若采用这种方式，除非进入运行期，否则根本不知道到底需要多少个对象，也不知道它们的存在时间有多长，以及准确的类型是什么。这些参数都在程序正式运行时才决定的。若需一个新对象，只需在需要它的时候在内存堆里简单地创建它即可。由于存储空间的管理是运行期间动态进行的，所以在内存堆里分配存储空间的时间比在堆栈里创建的时间长得多（在堆栈里创建存储空间一般只需要一个简单的指令，将堆栈指针向下或向下移动即可）。由于动态创建方法使对象本来就倾向于复杂，所以查找存储空间以及释放它所需的额外开销不会为对象的创建造成明显的影响。除此以外，更大的灵活性对于常规编程问题的解决是至关重要的。<br>C++允许我们决定是在写程序时创建对象，还是在运行期间创建，这种控制方法更加灵活。大家或许认为既然它如此灵活，那么无论如何都应在内存堆里创建对象，而不是在堆栈中创建。但还要考虑另外一个问题，亦即对象的“存在时间”或者“生存时间”（Lifetime）。若在堆栈或者静态存储空间里创建一个对象，编译器会判断对象的持续时间有多长，到时会自动“破坏”或者“清除”它。程序员可用两种方法来破坏一个对象：用程序化的方式决定何时破坏对象，或者利用由运行环境提供的一种“垃圾收集器”特性，自动寻找那些不再使用的对象，并将其清除。当然，垃圾收集器显得方便得多，但要求所有应用程序都必须容忍垃圾收集器的存在，并能默许随垃圾收集带来的额外开销。但这并不符合 C++语言的设计宗旨，所以未能包括到 C++里。但 Java 确实提供了一个垃圾收集器（Smalltalk 也有这样的设计；尽管 Delphi 默认为没有垃圾收集器，但可选择安装；而 C++亦可使用一些由其他公司开发的垃圾收集产品）。<br>……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘自《Java编程思想》 第五版&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>学习路线</title>
    <link href="https://shiyuquan.github.io/2018/10/22/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://shiyuquan.github.io/2018/10/22/学习路线/</id>
    <published>2018-10-22T09:08:55.000Z</published>
    <updated>2018-10-22T09:11:30.532Z</updated>
    
    <content type="html"><![CDATA[<p>厉害的人总是让人惊叹，也不能慢了自己的脚步<br><a id="more"></a></p><p>大致学习路线，根据某博主的建议，感觉挺好，中间肯定会有顺序上的调节和合并学习点的进行。<br>Java基础的升级版<br>– 《Java编程思想》</p><p>设计模式相关<br>– 《head first设计模式》，《大话设计模式》</p><p>代码优化重构<br>– 《重构 改善既有代码的设计》，《effective java》</p><p>虚拟机相关<br>– 《深入理解Java虚拟机》</p><p>并发编程<br>– 《Java并发编程实战》</p><p>jdk<br>– 源码</p><p>制造轮子<br>– 待定…</p><p>选定方向，深度发展</p><p>–<br>中间还应该学习的：<br>spring源码<br>微服务(springcloud,dubbo)<br>性能优化<br>数据库<br>中间件：消息(activemq,rabbitmq,kafuka)，搜索(es4,solr3,lucene2)，缓存(redis)</p><p>然后，基础：算法，数据结构，计算机网络，编译原理<br>方向：ai，虚拟化，大数据等方向等等等等</p><p>想到什么写什么，再做修改。</p><p><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;厉害的人总是让人惊叹，也不能慢了自己的脚步&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>心怀畏惧，砥砺前行</title>
    <link href="https://shiyuquan.github.io/2018/10/22/%E5%BF%83%E6%80%80%E7%95%8F%E6%83%A7%EF%BC%8C%E7%A0%A5%E7%A0%BA%E5%89%8D%E8%A1%8C/"/>
    <id>https://shiyuquan.github.io/2018/10/22/心怀畏惧，砥砺前行/</id>
    <published>2018-10-22T09:00:39.000Z</published>
    <updated>2018-10-22T09:05:22.452Z</updated>
    
    <content type="html"><![CDATA[<p>一篇杂谈，一点感触<br><a id="more"></a></p><p>今天公司相关负责人说要来前端新人，引起的话题。<br>公司内有个大神，对java底层了解很深（在我看来），我一直以为他是工作多年的，结果聊天的时候才了解到，人家只是两年的开发经验，并且做开发之前是学物理数学的…当时我就惊到了，和我想的出入太大，毕竟在我眼里，他底层了解是我所仰望的星空…<br>突然感到了点无奈和迷茫。在又了解到我的所属上司也就开发三年（我一直以为他有五年…）并且在我眼里springcloud流地飞起的他，其实学习springcloud也就三两个月…说实话，有点伤感，莫名地有股无力感从心底发出…我能赶上他们吗…<br>优秀的人往往就潜伏在身边。自以为是的遮罩让人看不清现实，偶然间的一瞥却又让你心生畏惧！<br>技不如人，也不思进取？<br>非也。心怀畏惧，砥砺前行。<br><img src="https://source.unsplash.com/random" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一篇杂谈，一点感触&lt;br&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://shiyuquan.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>springboot hibernate处理text格式数据</title>
    <link href="https://shiyuquan.github.io/2018/10/14/springboot-hibernate%E5%A4%84%E7%90%86text%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/"/>
    <id>https://shiyuquan.github.io/2018/10/14/springboot-hibernate处理text格式数据/</id>
    <published>2018-10-14T07:56:19.000Z</published>
    <updated>2018-10-14T09:23:34.288Z</updated>
    
    <content type="html"><![CDATA[<p>写博客网站，数据库用mysql，对博文数据的存储采用的数据类型为text，持久层框架用的hibernate，一切看似平静，然而…..<br><a id="more"></a></p><h1 id="问题初现"><a href="#问题初现" class="headerlink" title="问题初现"></a>问题初现</h1><p>直接上代码<br>实体类对应字段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md_content"</span>)</span><br><span class="line"><span class="keyword">private</span> String md;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"html_content"</span>)</span><br><span class="line"><span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"summary"</span>)</span><br><span class="line"><span class="keyword">private</span> String summary;</span><br></pre></td></tr></table></figure></p><p>jpa<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Article</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Article</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正常来说，单表的增删改我都是用的jpa直接处理，并且成功，但是！！！这里不正常！！！<br><img src="/images/text处理1.png" alt=""><br>通过断点查看，可以发现，数据通过jpa已经查出来了，但是映射不到实体类最终导致报错。<br><img src="/images/text处理2.png" alt=""><br>类型定义错误…<br>毫无头绪的错误，jpa之前用得舒舒服服的呀。抱着试一试的心态，用jdbctemplate写sql查询一次看看<br><img src="/images/text处理3.png" alt=""><br>emmmm，这tm什么鬼，summary有数据，md和html都没有…what？</p><h1 id="锁定问题"><a href="#锁定问题" class="headerlink" title="锁定问题"></a>锁定问题</h1><p>通过上一步的查看，发现是数据库text格式的数据出的错，于是百度谷歌走一遭呗。<br>最终得到结果</p><blockquote><p>hibernate对mysql数据库的数据类型映射里面，没有text…</p></blockquote><p>心累，感觉这不像是hibernate该有的bug，但是谁让他就是不支持呢<br>解决方法有两个</p><ol><li>一是改变hibernate方言，将text支持引用进去。本地写个类，继承MySQL5Dialect，添加注册<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDialect</span> <span class="keyword">extends</span> <span class="title">MySQL5Dialect</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomDialect</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        registerHibernateType(Types.DECIMAL, Hibernate.BIG_DECIMAL.getName());</span><br><span class="line">        registerHibernateType(Types.LONGVARCHAR,Hibernate.TEXT.getName());</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后改配置文件的方言为本地改的这个就行…看似完美，呵呵<br>你会发现<code>Hibernate</code>包下没有<code>TEXT</code>这东东，你去<code>Hibernate.TEXT.getName()</code>你点一辈子都没用，我在想网上的人是怎么Hibernate.出来东西的，我这里的 TEXT出轨了？？？</p><ol start="2"><li>好吧，第二种，也是我这里实现的初版，给实体类字段加注解,其中 <code>columnDefinition=&quot;TEXT&quot;</code>也是上一个解决方式要加的，因为上一个方法死娘胎里了就没讲。<br>代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里@Lob注解表示属性将被持久化为Blob或者Clob类型，有人说lob是large object，emmm姑且相信吧，text也是lob的一类</span></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="comment">// 懒加载，因为lob数据可能比较大，懒加载让他要用的时候再加载，提高性能。</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="comment">// columnDefinition属性表示创建表时，该字段创建的SQL语句，一般用于通过Entity生成表定义时使用。表示对应数据库的text类型</span></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md_content"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="keyword">private</span> String md;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md_content"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"summary"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="keyword">private</span> String summary;</span><br></pre></td></tr></table></figure></li></ol><p>至此，text的处理基本上完成了<br>对的，基本上</p><h1 id="额外的bug"><a href="#额外的bug" class="headerlink" title="额外的bug"></a>额外的bug</h1><p>发现进过上面的处理，依旧有两个字段没有值，就是一开始的md和html，通过瞎改改解决了，上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="comment">//@Column(name = "md_content", columnDefinition="TEXT")</span></span><br><span class="line"><span class="keyword">private</span> String md;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"html"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="comment">//@Column(name = "html_content", columnDefinition="TEXT")</span></span><br><span class="line"><span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"summary"</span>, columnDefinition=<span class="string">"TEXT"</span>)</span><br><span class="line"><span class="keyword">private</span> String summary;</span><br></pre></td></tr></table></figure></p><p>将column对应的数据库子弹的下划线去掉就可以，至于为什么嘛，我也不懂T-T</p><h1 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h1><p>到现在，依旧没有实现用jpa查询text类型的数据，因为text加不进hibernate方言里面。jdbctemplate可以实现了，然后改了个地方<br>下面是我最终的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"md"</span>, columnDefinition=<span class="string">"CLOB"</span>)</span><br><span class="line"><span class="keyword">private</span> String md;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"html"</span>, columnDefinition=<span class="string">"CLOB"</span>)</span><br><span class="line"><span class="keyword">private</span> String html;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span></span><br><span class="line"><span class="meta">@Basic</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"summary"</span>, columnDefinition=<span class="string">"CLOB"</span>)</span><br><span class="line"><span class="keyword">private</span> String summary;</span><br></pre></td></tr></table></figure></p><p>我把text改成了clob，因为hibernate没有text支持所以我觉得还是写clob可能会好点<br>在一个就是为什么字段设置下划线查不出数据。还有待调查。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写博客网站，数据库用mysql，对博文数据的存储采用的数据类型为text，持久层框架用的hibernate，一切看似平静，然而…..&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
      <category term="hibernate" scheme="https://shiyuquan.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>vue + ts diy分页组件实现</title>
    <link href="https://shiyuquan.github.io/2018/10/07/vue-ts-diy%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shiyuquan.github.io/2018/10/07/vue-ts-diy分页组件实现/</id>
    <published>2018-10-07T07:14:11.000Z</published>
    <updated>2018-10-07T12:01:49.321Z</updated>
    
    <content type="html"><![CDATA[<p>学着用vue，自己写点东西，边学边做一个博客网站。之前遇见了前台的分页效果，想来自己还没有实现过就将就着用vue来实现一次…emmmmm 满满的坑…<br><a id="more"></a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分页栏的每个显示都是一个小模块(比如页数，上一页，下一页什么的)，因为分页组件显示的字符比较固定，所以我将所有的显示都分了固定的数值，方便之后的填充分页栏数组。具体数值分配如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-2 上一页</span><br><span class="line">-1 下一页</span><br><span class="line">0  表示显示页码以外还有很多页</span><br><span class="line">n  第n页</span><br><span class="line">ps：</span><br><span class="line">首页和尾页用1和最大页数表示</span><br></pre></td></tr></table></figure></p><p>定义好数值分配后，根据查询的分页数据来获得分页组件相关的数据，比如页码，页大小，总页数。<br>根据页码和总页数，来动态生成分页栏数组，举个栗子：<br>假如定义分页栏显示分页的栏目为7，页码为4，总页数为23，那么生成的数组就是[1,2,3,4,5,6,7,0,23,-1]<br>假如页码为10，那么生成数组为[-2,1,0,7,8,9,10,11,12,13,0,23,-1]<br>效果图<br><img src="/images/page1.png" alt=""><br><img src="/images/page2.png" alt=""><br><img src="/images/page3.png" alt=""></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="vue-ts-代码"><a href="#vue-ts-代码" class="headerlink" title="vue ts 代码"></a>vue ts 代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">private homePageService = <span class="keyword">new</span> HomePageService();</span><br><span class="line">private PageSizes: number[] = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]; <span class="comment">// 页大小配置</span></span><br><span class="line">private articlePageDate: any[] = []; <span class="comment">// 页面分页的内容数据</span></span><br><span class="line">private totalPages: number = <span class="number">1</span>; <span class="comment">// 总页数</span></span><br><span class="line">private pageNumber: number = <span class="number">1</span>; <span class="comment">// 页码</span></span><br><span class="line">private showPagesize: number = <span class="number">7</span>; <span class="comment">// 分页栏显示页数</span></span><br><span class="line">private showPageList: any[] = []; <span class="comment">// 分页栏数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载页面请求分页数据，返回结果包含的页码和总页数，页数分页点击事件。</span></span><br><span class="line">private queryForPage(pageNum: number) &#123;</span><br><span class="line">    <span class="comment">// 根据定义的分页数值来判断上一页下一页</span></span><br><span class="line">    <span class="keyword">if</span> (pageNum === <span class="number">-2</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNumber = <span class="keyword">this</span>.pageNumber - <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pageNum === <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNumber = <span class="keyword">this</span>.pageNumber + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNumber = pageNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求数据接口</span></span><br><span class="line">    <span class="keyword">this</span>.homePageService.queryForPage(<span class="keyword">this</span>.pageNumber, <span class="keyword">this</span>.PageSizes[<span class="number">2</span>])</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.articlePageDate = res.date;</span><br><span class="line">        <span class="comment">// 获取返回的总页数</span></span><br><span class="line">        <span class="keyword">this</span>.totalPages = <span class="built_in">Number</span>(res.totalPages);</span><br><span class="line">        <span class="comment">// 获取返回的页码</span></span><br><span class="line">        <span class="keyword">this</span>.pageNumber = <span class="built_in">Number</span>(res.pageNumber);</span><br><span class="line">        <span class="comment">// 生成分页数组</span></span><br><span class="line">        <span class="keyword">this</span>.changePages();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页栏数组变化执行事件</span></span><br><span class="line">@Watch(<span class="string">'showPageList'</span>)</span><br><span class="line">private watchShowPageList() &#123;</span><br><span class="line">    <span class="comment">// $nextTick 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</span></span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.pageItemActive();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成分页数组</span></span><br><span class="line">private changePages() &#123;</span><br><span class="line">    <span class="comment">// 重置数组</span></span><br><span class="line">    <span class="keyword">this</span>.showPageList = [];</span><br><span class="line">    <span class="comment">// 分页栏显示数除2，表示当前页码前后显示的多余页码。比如当前页码为10，显示7,8,9,10,11,12,13</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.showPagesize / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 如果当前页-偏移量比1大，显示上一页（«），第一页和中间还有很多页（...）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pageNumber - x &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环页码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.pageNumber - x; i &lt;= <span class="keyword">this</span>.pageNumber + x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &amp;&amp; i &lt;= <span class="keyword">this</span>.totalPages) &#123;</span><br><span class="line">            <span class="keyword">this</span>.showPageList.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前页-偏移量比最大页数小，显示下一页（»），最后一页和中间还有很多页（...）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pageNumber + x &lt; <span class="keyword">this</span>.totalPages ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="keyword">this</span>.totalPages);</span><br><span class="line">        <span class="keyword">this</span>.showPageList.push(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态添加class</span></span><br><span class="line">private pageItemActive() &#123;</span><br><span class="line">    <span class="keyword">const</span> pageItems = <span class="built_in">document</span>.getElementsByName(<span class="string">'pageItems'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> pageItems) &#123;</span><br><span class="line">        item.classList.remove(<span class="string">'active'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> pageItems) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.innerHTML.replace(<span class="regexp">/\s+/g</span>, <span class="string">''</span>) === <span class="keyword">this</span>.pageNumber.toString()) &#123;</span><br><span class="line">            item.classList.add(<span class="string">'active'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="html-代码"><a href="#html-代码" class="headerlink" title="html 代码"></a>html 代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul-page"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in showPageList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"queryForPage(n)"</span> <span class="attr">name</span>=<span class="string">"pageItems"</span> <span class="attr">v-if</span>=<span class="string">"n === -2"</span>&gt;</span></span><br><span class="line">                «</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"queryForPage(n)"</span> <span class="attr">name</span>=<span class="string">"pageItems"</span> <span class="attr">v-else-if</span>=<span class="string">"n === -1"</span>&gt;</span></span><br><span class="line">                »</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"pageItems"</span> <span class="attr">v-else-if</span>=<span class="string">"n === 0"</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"queryForPage(n)"</span> <span class="attr">name</span>=<span class="string">"pageItems"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                &#123;&#123; n &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学着用vue，自己写点东西，边学边做一个博客网站。之前遇见了前台的分页效果，想来自己还没有实现过就将就着用vue来实现一次…emmmmm 满满的坑…&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://shiyuquan.github.io/tags/vue/"/>
    
      <category term="typescript" scheme="https://shiyuquan.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>分享vip视频免费看的方法</title>
    <link href="https://shiyuquan.github.io/2018/09/24/%E5%88%86%E4%BA%ABvip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%9C%8B%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://shiyuquan.github.io/2018/09/24/分享vip视频免费看的方法/</id>
    <published>2018-09-24T14:38:10.000Z</published>
    <updated>2018-09-25T01:09:03.575Z</updated>
    
    <content type="html"><![CDATA[<p>分享个小福利，免费看各种VIP的方法。亲测可用(不能用无写来干嘛呢…我是不是有点…emmmmmmm…)<br><a id="more"></a></p><h1 id="百度方法"><a href="#百度方法" class="headerlink" title="百度方法"></a>百度方法</h1><p>百度搜索关键字<code>vip视频解析</code>。大概劳动流程都是打开解析网站，然后找到你想看的vip电影，复制网址，粘贴到解析网站，balabalabala…就可以了。可能有些解析网站没有视频源，可以换一个网站试试。分享几个解析网站吧<br><a href="http://www.5ifxw.com/vip/" target="_blank" rel="noopener">http://www.5ifxw.com/vip/</a><br><a href="http://live.gopartook.com/" target="_blank" rel="noopener">http://live.gopartook.com/</a><br><a href="http://tv.dsqndh.com" target="_blank" rel="noopener">http://tv.dsqndh.com</a><br><a href="http://51.ruyo.net/p/3127.html" target="_blank" rel="noopener">http://51.ruyo.net/p/3127.html</a></p><h2 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h2><p>可能有些人看上面的方法还是不懂操作，那么来演示一遍八<br>爱奇艺为例，打开，到vip电影里面随便点一部，随便选了红色框框的那个什么鬼电影<br><img src="/images/vip解析1.png" alt=""><br>进去后复制网站链接，下面画红色框框的，网址有多少复制多少哦<br><img src="/images/vip解析2.png" alt=""><br>复制好后，某度搜索<code>VIP视频在线解析</code>,嗯有结果了<br><img src="/images/vip解析3.png" alt=""><br>就选第一个来试试<br>进去后往下翻，看见下图有个播放地址的东东，把你刚刚复制的网址粘贴进来，点击开始解析！！<br><img src="/images/vip解析4.png" alt=""><br>然后就可以啦，484很简单(如果提示没有flash，就点它下个)<br><img src="/images/vip解析5.png" alt=""></p><h1 id="谷歌浏览器插件-油猴"><a href="#谷歌浏览器插件-油猴" class="headerlink" title="谷歌浏览器插件(油猴)"></a>谷歌浏览器插件(油猴)</h1><p>谷歌的插件很强大的，国内不给下，科学上网呗(无奈ing)。我这分享了个以前版本的，虽然老吧，还能用…别介哈<br>梯子<a href="https://pan.baidu.com/s/1qSPST6xKhHRWXD5_m9qf8Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1qSPST6xKhHRWXD5_m9qf8Q</a> 密码: i55g<br>里面有个<code>Tampermonkey油猴插件.crx</code>的文件，下载拖到谷歌扩展程序里面<br>扩展程序网址输入<code>chrome://extensions/</code>就可以进去了，.crx文件拖进去就行<br><img src="/images/vip解析6.png" alt=""><br>好了后看网址栏右边多了个图标<br><img src="/images/vip解析7.png" alt=""><br>鼠标左键点击-&gt;出来个栏，点击<code>添加新脚本</code>-&gt;点击右上<code>实用工具</code>导航栏-&gt;压缩包那里点击选择文件<br><img src="/images/vip解析8.png" alt=""><br>选择刚刚云盘下载的那个压缩文件，打开就行<br><img src="/images/vip解析9.png" alt=""><br>完了点击已安装脚本<br><img src="/images/vip解析10.png" alt=""><br>好了会有东西的<br>接下来找到你想看的vip视频，还是以爱奇艺为栗子<br>打开爱奇艺，网站左上角有黄色模块，里面都是大神提供的解析网站…就和上面某度的辣个一样一样的<br><img src="/images/vip解析11.png" alt=""><br>还是刚刚的哪一部电影，点进去八，没有会员不给看哒…进去点击左上角的黄色东东，我以无名小站为栗子，点击无名小站<br><img src="/images/vip解析12.png" alt=""><br>会有个新的网站出来，不出意外的话，你就可以看你的vip了。是不是美滋滋。如果提示没有flash，跟提示下载就行。<br><img src="/images/vip解析13.png" alt=""><br>balabalabala…<br>ps：包里面有些其他的功能，安装了用就行，哇卡卡卡。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享个小福利，免费看各种VIP的方法。亲测可用(不能用无写来干嘛呢…我是不是有点…emmmmmmm…)&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java短信接口实现短信验证码注册登录</title>
    <link href="https://shiyuquan.github.io/2018/09/23/java%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95/"/>
    <id>https://shiyuquan.github.io/2018/09/23/java短信接口实现短信验证码注册登录/</id>
    <published>2018-09-23T05:46:00.000Z</published>
    <updated>2018-09-23T07:11:38.052Z</updated>
    
    <content type="html"><![CDATA[<p>springboot项目的短信接口实现，使用三方短信接口平<a href="http://www.miaodiyun.com/" target="_blank" rel="noopener">秒滴</a><br><a id="more"></a></p><h1 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h1><p>我：登录做完啦(一脸舒适)<br>某：看一下？<br>我：来来来<br>balabalabala…..<br>某：完了？<br>我：对啊<br>某：现在都短信验证好吗<br>我：……(打不死你)<br>…<br>…</p><h1 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h1><p>找短信接口-&gt;实现短信api-&gt;生成验证码-&gt;发短信-&gt;保存验证码-&gt;收到短信-&gt;输入验证码-&gt;提交验证-&gt;finish(成不成功看天命吧……)</p><h1 id="注册短信平台"><a href="#注册短信平台" class="headerlink" title="注册短信平台"></a>注册短信平台</h1><p>首先我们没有通信大佬们的支持，emmmm，咋办捏？只能用三方的平台啦(无奈ing)，百啊百度啊度…..决定就是你啦！<a href="http://www.miaodiyun.com/" target="_blank" rel="noopener">秒滴</a>，主要是有免费的一百多条短信可以用，测试开发完全足够了，谁叫我们穷呢？</p><h2 id="注册登录"><a href="#注册登录" class="headerlink" title="注册登录"></a>注册登录</h2><p>这个不多说了。官网 <a href="http://www.miaodiyun.com" target="_blank" rel="noopener">http://www.miaodiyun.com</a></p><h2 id="新建短信模板"><a href="#新建短信模板" class="headerlink" title="新建短信模板"></a>新建短信模板</h2><p>配置管理-&gt;验证码短信模板-&gt;新建模板<br><img src="/images/短信接口1.png" alt=""><br>简历模板提交等待吧(ps 可能不成功，公司尽量写上市的吧…)</p><h2 id="查看token"><a href="#查看token" class="headerlink" title="查看token"></a>查看token</h2><p>模板提交成功后去 用户中心-&gt;账户管理-&gt;查看token 获取token和sid，记住了，等下有用的<br><img src="/images/短信接口2.png" alt=""></p><h2 id="下载官方给的demo源码"><a href="#下载官方给的demo源码" class="headerlink" title="下载官方给的demo源码"></a>下载官方给的demo源码</h2><p>点击API文档<br><img src="/images/短信接口3.png" alt=""><br>进入开发者中心，点击导航栏的demo下载，下载java demo<br><img src="/images/短信接口4.png" alt=""><br>下载完后，自己查看下源码，demo很简单的，使用也就是copy，短信发成功了就是结合自己项目改改代码就行。</p><h1 id="植入源码到springboot项目"><a href="#植入源码到springboot项目" class="headerlink" title="植入源码到springboot项目"></a>植入源码到springboot项目</h1><p>解压下载的demo，看源码，搬砖。我这里使用短信接口实现短信验证码注册功能，附上代码</p><p>项目结构<br><img src="/images/短信接口5.png" alt=""><br>功能需要的文件用框框画上了，一个一个来吧</p><h2 id="config-java"><a href="#config-java" class="headerlink" title="config.java"></a>config.java</h2><p>短信接口的基础配置文件,刚刚官网获取的token和sid需要配置在这里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils.TextMessageCode;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/17 21:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * url前半部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"https://api.miaodiyun.com/20150822"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发者注册后系统自动生成的账号，可在官网登录后查看</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_SID = <span class="string">"114e02e7a1c344f58b5abde18eb1946b"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发者注册后系统自动生成的TOKEN，可在官网登录后查看</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTH_TOKEN = <span class="string">"5a4a30084dc143d29cd0af62dd619f25"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据类型, JSON或XML</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESP_DATA_TYPE = <span class="string">"json"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="CodeUtil-java"><a href="#CodeUtil-java" class="headerlink" title="CodeUtil.java"></a>CodeUtil.java</h2><p>随机6位的验证码工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils.TextMessageCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/17 20:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRandNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String randNum = <span class="keyword">new</span> Random().nextInt(<span class="number">1000000</span>)+<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (randNum.length()!=<span class="number">6</span>) &#123;   <span class="comment">//如果生成的不是6位数随机数则返回该方法继续生成</span></span><br><span class="line">            <span class="keyword">return</span> getRandNum();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> randNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="HttpUtil-java"><a href="#HttpUtil-java" class="headerlink" title="HttpUtil.java"></a>HttpUtil.java</h2><p>http请求的工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils.TextMessageCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/17 21:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造通用参数timestamp、sig和respDataType</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createCommonParam</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 时间戳</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">        String timestamp = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 签名</span></span><br><span class="line">        String sig = DigestUtils.md5Hex(Config.ACCOUNT_SID + Config.AUTH_TOKEN + timestamp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;timestamp="</span> + timestamp + <span class="string">"&amp;sig="</span> + sig + <span class="string">"&amp;respDataType="</span> + Config.RESP_DATA_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     *            功能和操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     *            要post的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(String url, String body)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            OutputStreamWriter out = <span class="keyword">null</span>;</span><br><span class="line">            BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">            URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">            URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置连接参数</span></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">20000</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">            <span class="comment">// 提交数据</span></span><br><span class="line">            out = <span class="keyword">new</span> OutputStreamWriter(conn.getOutputStream(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            out.write(body);</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取返回数据</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">            String line = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">boolean</span> firstLine = <span class="keyword">true</span>; <span class="comment">// 读第一行不加换行符</span></span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (firstLine)</span><br><span class="line">                &#123;</span><br><span class="line">                    firstLine = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    result += System.lineSeparator();</span><br><span class="line">                &#125;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调测试工具方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postHuiDiao</span><span class="params">(String url, String body)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            OutputStreamWriter out = <span class="keyword">null</span>;</span><br><span class="line">            BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">            URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">            URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置连接参数</span></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            conn.setReadTimeout(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提交数据</span></span><br><span class="line">            out = <span class="keyword">new</span> OutputStreamWriter(conn.getOutputStream(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            out.write(body);</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取返回数据</span></span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream(), <span class="string">"UTF-8"</span>));</span><br><span class="line">            String line = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">boolean</span> firstLine = <span class="keyword">true</span>; <span class="comment">// 读第一行不加换行符</span></span><br><span class="line">            <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (firstLine)</span><br><span class="line">                &#123;</span><br><span class="line">                    firstLine = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    result += System.lineSeparator();</span><br><span class="line">                &#125;</span><br><span class="line">                result += line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="GetMessage-java"><a href="#GetMessage-java" class="headerlink" title="GetMessage.java"></a>GetMessage.java</h2><p>其他地方通过调用这个类的execute方法发送短信，短信发送接口，验证码存放在redis里面，key-value对应的手机号和验证码。关于redis的使用，可以参考我另外一篇博客<a href="https://shiyuquan.github.io/2018/09/19/springBoot%E4%BD%BF%E7%94%A8redis/">springBoot使用redis</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils.TextMessageCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.vue.vuedemo.utils.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/17 21:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String operation = <span class="string">"/industrySMS/sendSMS"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accountSid = Config.ACCOUNT_SID;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码通知短信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String tel)</span></span>&#123;</span><br><span class="line">        HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">        CodeUtil codeUtil = <span class="keyword">new</span> CodeUtil();</span><br><span class="line">        <span class="comment">// 获取验证码</span></span><br><span class="line">        String code = codeUtil.getRandNum();</span><br><span class="line">        <span class="comment">// 设置短信内容</span></span><br><span class="line">        String smsContent = <span class="string">"【宝驰信科技】尊敬的用户，您的验证码为"</span>+code;</span><br><span class="line">        String tmpSmsContent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            tmpSmsContent = URLEncoder.encode(smsContent, <span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发送的url</span></span><br><span class="line">        String url = Config.BASE_URL + operation;</span><br><span class="line">        <span class="comment">// 发送的请求体</span></span><br><span class="line">        String body = <span class="string">"accountSid="</span> + accountSid + <span class="string">"&amp;to="</span> + tel + <span class="string">"&amp;smsContent="</span> + tmpSmsContent</span><br><span class="line">                + httpUtil.createCommonParam();</span><br><span class="line">        <span class="comment">// post请求</span></span><br><span class="line">        String result = httpUtil.post(url, body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里是个自己挖的坑，还好平台返回的格式固定，我就截取了字符串做判断，其实平台有提供回调方法的，我当时懒得动...你懂的，想看的话去源码找吧，在huidiao包里面</span></span><br><span class="line">        <span class="keyword">char</span>[] res = result.toCharArray();</span><br><span class="line">        String codeResult = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">13</span>; i&lt;=<span class="number">17</span>; i++)&#123;</span><br><span class="line">            codeResult = codeResult + String.valueOf(res[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 00000代表成功了</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"00000"</span>.equals(codeResult)) &#123;</span><br><span class="line">            <span class="comment">// 发送成功后将电话号码和验证码存在redis，设置有效期为5分钟。之后前台要发送验证需要在redis查询是否有记录</span></span><br><span class="line">            redisService.set(tel, code, <span class="number">300L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> codeResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MyResult&lt;User&gt; <span class="title">addUser</span><span class="params">(@RequestBody User user, @RequestParam String checkNum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(user.getUserName())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"请输入账号"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(userService.findUser(user.getUserName()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"账号已存在，请重新输入"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(user.getPhoneNum())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"请输入手机号"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(user.getPassword())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"请输入密码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证码非空判断</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(checkNum)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"请输入验证码"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 验证码非空，获取redis存的手机号对应的验证码，进行验证，失败balabalabala，否则成功</span></span><br><span class="line">        String code = (String)redisService.get(user.getPhoneNum());</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"验证码不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!checkNum.equals(code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(<span class="keyword">null</span>, <span class="number">600</span>, <span class="string">"验证码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    user.setUserId(UUID.randomUUID().toString());</span><br><span class="line">    user.setId(UUID.randomUUID().toString());</span><br><span class="line">    User user1 = userService.addUser(user);</span><br><span class="line">    <span class="keyword">if</span>(user1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().error(user1, <span class="number">600</span>, <span class="string">"新增失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;User&gt;().success(user1, <span class="number">200</span>, <span class="string">"success"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取验证码接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/getcode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MyResult&lt;String&gt; <span class="title">sendMessage</span><span class="params">(@RequestParam String phoneNum)</span> </span>&#123;</span><br><span class="line">    String res = getMessage.execute(phoneNum);</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"00000"</span>.equals(res)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;String&gt;().success(<span class="keyword">null</span>, <span class="number">200</span>, getMessage.execute(phoneNum));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyResult&lt;String&gt;().success(<span class="keyword">null</span>, <span class="number">200</span>, <span class="string">"获取验证码失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;springboot项目的短信接口实现，使用三方短信接口平&lt;a href=&quot;http://www.miaodiyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;秒滴&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
      <category term="短信接口" scheme="https://shiyuquan.github.io/tags/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>springBoot使用redis</title>
    <link href="https://shiyuquan.github.io/2018/09/19/springBoot%E4%BD%BF%E7%94%A8redis/"/>
    <id>https://shiyuquan.github.io/2018/09/19/springBoot使用redis/</id>
    <published>2018-09-19T02:56:21.000Z</published>
    <updated>2018-09-19T03:21:09.522Z</updated>
    
    <content type="html"><![CDATA[<p>学习redis在springboot环境下的部署，使用RedisTemplate操作。springboot版本为:2.0.4<br><a id="more"></a></p><h1 id="pom-xml引用依赖"><a href="#pom-xml引用依赖" class="headerlink" title="pom.xml引用依赖"></a>pom.xml引用依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h1><p>加入redis配置。我使用Lettuce配置redis启动失败，原因未知。改用jedis后成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">    #意思是连接了1000毫秒后没接连成功就断开连接。</span><br><span class="line">    timeout: 1000</span><br><span class="line">    #Lettuce 当多线程使用同一连接实例时，是线程安全的 jedis不安全</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        #最大空闲数</span><br><span class="line">        max-idle: 8</span><br><span class="line">        #连接池的最大数据库连接数。设为0表示无限制</span><br><span class="line">        max-active: 0</span><br><span class="line">        #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。</span><br><span class="line">        max-wait: 1000</span><br></pre></td></tr></table></figure></p><h1 id="RedisConfig-java"><a href="#RedisConfig-java" class="headerlink" title="RedisConfig.java"></a>RedisConfig.java</h1><p>redis配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/18 20:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置缓存有效期</span></span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofSeconds(<span class="number">5</span>));</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory))</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer serializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(mapper);</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate stringRedisTemplate = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        stringRedisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用RedisTemplate访问Redis数据结构"><a href="#使用RedisTemplate访问Redis数据结构" class="headerlink" title="使用RedisTemplate访问Redis数据结构"></a>使用RedisTemplate访问Redis数据结构</h1><p>感谢大神的分享<a href="https://www.jianshu.com/p/7bf5dc61ca06/" target="_blank" rel="noopener">https://www.jianshu.com/p/7bf5dc61ca06/</a></p><h1 id="RedisTemplate二次封装-RedisService-java"><a href="#RedisTemplate二次封装-RedisService-java" class="headerlink" title="RedisTemplate二次封装 RedisService.java"></a>RedisTemplate二次封装 RedisService.java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vue.vuedemo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> shiyuquan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/9/18 20:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入缓存设置时效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, Object value, Long expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">            operations.set(key, value);</span><br><span class="line">            redisTemplate.expire(key, expireTime, TimeUnit.SECONDS);</span><br><span class="line">            result = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String... keys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePattern</span><span class="params">(<span class="keyword">final</span> String pattern)</span> </span>&#123;</span><br><span class="line">        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);</span><br><span class="line">        <span class="keyword">if</span> (keys.size() &gt; <span class="number">0</span>)</span><br><span class="line">            redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exists(key)) &#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存中是否有对应的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        result = operations.get(key);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hmSet</span><span class="params">(String key, Object hashKey, Object value)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();</span><br><span class="line">        hash.put(key,hashKey,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hmGet</span><span class="params">(String key, Object hashKey)</span></span>&#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt;  hash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> hash.get(key,hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lPush</span><span class="params">(String k,Object v)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        list.rightPush(k,v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String k, <span class="keyword">long</span> l, <span class="keyword">long</span> l1)</span></span>&#123;</span><br><span class="line">        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();</span><br><span class="line">        <span class="keyword">return</span> list.range(k,l,l1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        set.add(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">setMembers</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();</span><br><span class="line">        <span class="keyword">return</span> set.members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zAdd</span><span class="params">(String key,Object value,<span class="keyword">double</span> scoure)</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        zset.add(key,value,scoure);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序集合获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoure1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">rangeByScore</span><span class="params">(String key,<span class="keyword">double</span> scoure,<span class="keyword">double</span> scoure1)</span></span>&#123;</span><br><span class="line">        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();</span><br><span class="line">        <span class="keyword">return</span> zset.rangeByScore(key, scoure, scoure1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习redis在springboot环境下的部署，使用RedisTemplate操作。springboot版本为:2.0.4&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://shiyuquan.github.io/tags/java/"/>
    
      <category term="springboot" scheme="https://shiyuquan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>redis安装使用</title>
    <link href="https://shiyuquan.github.io/2018/09/19/redis%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://shiyuquan.github.io/2018/09/19/redis安装使用/</id>
    <published>2018-09-19T01:59:54.000Z</published>
    <updated>2018-09-19T03:18:10.433Z</updated>
    
    <content type="html"><![CDATA[<p>做手机短信验证的时候，考虑验证码的存放问题使用说明方式。因为验证码的时效性，放入关系数据库可以实现，但是较麻烦。最终想到缓存可以完美实现，正好没用过也想学redis，就顺带学习redis使用和安装。<br><a id="more"></a></p><h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。<br>中文官网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><h1 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h1><p>参考<a href="https://www.cnblogs.com/NiceCui/p/7794659.html" target="_blank" rel="noopener">https://www.cnblogs.com/NiceCui/p/7794659.html</a></p><h1 id="Redis-Windows-安装"><a href="#Redis-Windows-安装" class="headerlink" title="Redis Windows 安装"></a>Redis Windows 安装</h1><p>下载链接: <a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a><br>1.redis本身没有提供微软的redis，windows下的redis由微软自己提供的。点击下载链接 找到redis-x64-*.zip点击下载。<br>2.解压文件到自己制定的位置，我放在E:\Redis目录下，至此redis安装完成</p><h1 id="Redis-使用"><a href="#Redis-使用" class="headerlink" title="Redis 使用"></a>Redis 使用</h1><ol><li>win+r 输入cmd打开命令工具</li><li><p>进入安装目录启动redis 命令：redis-server.exe redis.windows.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:</span><br><span class="line">CD Redis</span><br><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure></li><li><p>测试链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure></li></ol><p>-h 127.0.0.1 是host<br>-p 6379 是端口<br>插入键值对试一下 set key value,对应键值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set name shiyuquan</span><br></pre></td></tr></table></figure></p><p>查看指定键的值 get key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get name</span><br></pre></td></tr></table></figure></p><p>得到结果 shiyuquan</p><p>redis命令参考 <a href="http://www.redis.net.cn/order/" target="_blank" rel="noopener">http://www.redis.net.cn/order/</a></p><h1 id="Redis-图形界面"><a href="#Redis-图形界面" class="headerlink" title="Redis 图形界面"></a>Redis 图形界面</h1><p>市面上的图形界面有很多，我这里选用了国人开发的<a href="http://www.treesoft.cn/dms.html" target="_blank" rel="noopener">TreeNMS</a><br>进官网，下载TreeNMS for Redis<br>解压zip到你指定的位置，进去看<code>说明.txt</code>跟着做就行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做手机短信验证的时候，考虑验证码的存放问题使用说明方式。因为验证码的时效性，放入关系数据库可以实现，但是较麻烦。最终想到缓存可以完美实现，正好没用过也想学redis，就顺带学习redis使用和安装。&lt;br&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://shiyuquan.github.io/tags/redis/"/>
    
  </entry>
  
</feed>
